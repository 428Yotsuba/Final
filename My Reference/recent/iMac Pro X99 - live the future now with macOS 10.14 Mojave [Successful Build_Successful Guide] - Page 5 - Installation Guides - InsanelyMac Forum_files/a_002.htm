<!DOCTYPE html>
<html dir="ltr" lang="en-US"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<title>How to build your own iMac Pro [Successful Build/Extended Guide]</title>
		
<meta charset="utf-8">

	<meta name="viewport" content="width=device-width, initial-scale=1">



	<meta name="twitter:card" content="summary">



<meta name="theme-color" content="#123456">

	
		<link rel="canonical" href="https://www.insanelymac.com/forum/topic/331658-how-to-build-your-own-imac-pro-successful-buildextended-guide/?do=findComment&amp;comment=2629173">
	



	<!-- base href="https://www.insanelymac.com/forum/topic/331658-how-to-build-your-own-imac-pro-successful-buildextended-guide/?do=embed&comment=2629173&embedComment=2629173&embedDo=findComment" -->

		


	
		<link href="css.css" rel="stylesheet" referrerpolicy="origin">
	



	<link rel="stylesheet" href="341e4a57816af3ba440d891ca87450ff_framework.css" media="all">

	<link rel="stylesheet" href="05e81b71abe4f22d6eb8d1a929494829_responsive.css" media="all">

	<link rel="stylesheet" href="90eb5adf50a8c640f633d47fd7eb1778_core.css" media="all">

	<link rel="stylesheet" href="a_data_003/eea6316826fa73e0715f4589da464721_embed.css" media="all">

	<link rel="stylesheet" href="a_data_003/285d0f27bbd9d47cb47a57e0010825cf_embeds.css" media="all">




<link rel="stylesheet" href="258adbb6e4f3e83cd3b355f84e3fa002_custom.css" media="all">




		<script type="text/javascript">
			var ipsDebug = false;
		</script>

		
			
				
				<script type="text/javascript" src="a_data_003/commonEmbedHandler.js"></script>
			
				
				<script type="text/javascript" src="a_data_003/internalEmbedHandler.js"></script>
			
		
	</head>
	<body class="ipsApp ipsApp_front ipsClearfix ipsLayout_noBackground ipsJS_has ipsClearfix" data-role="internalEmbed" data-pageapp="forums" data-pagemodule="forums" data-pagecontroller="topic">
		<div id="ipsEmbed" style="opacity: 1;">
			

<div data-embedinfo-maxsize="500" class="ipsRichEmbed" style="max-width: 500px;">
	

<div class="ipsRichEmbed_header ipsAreaBackground_light ipsClearfix">
	<a href="https://www.insanelymac.com/forum/topic/331658-how-to-build-your-own-imac-pro-successful-buildextended-guide/?do=findComment&amp;comment=2629173" class="ipsRichEmbed_openItem" target="_blank"><i class="fa fa-external-link-square"></i></a>
	<div class="ipsPhotoPanel ipsPhotoPanel_tiny ipsType_blendLinks">
		


	<a href="https://www.insanelymac.com/forum/profile/1362934-kgp-imacpro/" data-ipshover="" data-ipshover-target="https://www.insanelymac.com/forum/profile/1362934-kgp-imacpro/?do=hovercard" class="ipsUserPhoto ipsUserPhoto_tiny" title="Go to KGP-iMacPro's profile" target="_blank">
		<img src="photo-thumb-1362934.jpg" alt="KGP-iMacPro">
	</a>

		<div>
			<p class="ipsRichEmbed_title ipsType_reset ipsTruncate ipsTruncate_line">
				<a href="https://www.insanelymac.com/forum/topic/331658-how-to-build-your-own-imac-pro-successful-buildextended-guide/?do=findComment&amp;comment=2629173" target="_blank">KGP-iMacPro replied to a topic</a>
			</p>
			<p class="ipsRichEmbed_author ipsType_reset ipsType_light ipsTruncate ipsTruncate_line">
				<a href="https://www.insanelymac.com/forum/topic/331658-how-to-build-your-own-imac-pro-successful-buildextended-guide/?do=findComment&amp;comment=2629173" target="_blank"><time datetime="2018-08-07T10:59:28Z" title="08/07/2018 07:59  PM" data-short="Aug 7">August 7, 2018</time></a>
			</p>
		</div>
	</div>
</div>
	<div class="ipsPad_double">
		<div class="ipsRichEmbed_originalItem ipsAreaBackground_reset ipsPad ipsSpacer_bottom ipsType_blendLinks">
			<div>
				

<h3 class="ipsRichEmbed_itemTitle ipsTruncate ipsTruncate_line ipsType_blendLinks">
	<a href="https://www.insanelymac.com/forum/topic/331658-how-to-build-your-own-imac-pro-successful-buildextended-guide/" title="How to build your own iMac Pro [Successful Build/Extended Guide]" target="_blank">How to build your own iMac Pro [Successful Build/Extended Guide]</a>
</h3>

	<div class="ipsType_richText ipsType_medium" data-truncate="1"><span style="display: block; overflow: hidden; text-indent: 0px; text-overflow: ellipsis; white-space: nowrap;">
 		Successfully running my iMac Pro Skylake-X/X299 Build with macOS High
 Sierra 10.13.6 SU (17G4015)!     	&nbsp;     	&nbsp;     	 		     	
&nbsp;    	Abstract and Introduction:&nbsp;     	&nbsp;    	This 
originating post constitutes a new macOS 10.13 High Sierra Desktop Guide
 for Skylake-X/X299, which certainly can still grow and improve by your 
estimated user feedback. This Skylake-X/X299 10.13 High Sierra Desktop 
Guide bases on the ASUS Prime X299 Deluxe. However, also other X299 ASUS
 mainboard models or X299 mainboards of other brands should be 
compatible with this guide by considering a few mandatory modifications 
detailed below. The i7-7800X (6-core) was chosen as the Skylake-X 
Startup Configuration Model in order to minimise the guide development 
costs.&nbsp; It has been replaced within the goal configuration by the 
i9-7980XE (18 core). All other Skylake-X models compatible with this 
guide are detailed in the figure below.    	&nbsp;    	 		 	  	 		&nbsp;
 	  	 		Carefully consider, which Skylake-X model might be the correct 
choice for your specific needs. Also the note of the following 
limitations: 	  	 		&nbsp; 	  	 		a.) The i7-7640X and 7740X only 
support two channels DDR4-2666 and only posses 16 PCI express 3.0 lanes,
 which are already used up by implementing a state-of-the-art 16 lane 
PCIe graphics adapter. Thus, there are no further PCI express 3.0 lanes 
for using PCIe NVMe drives or additional PCIe adapters! 	  	 		&nbsp; 	 
 	 		b.) The i7-7800X and i7-7820X already support four channels 
DDR4-2666 but however also possess only 28 PCI express 3.0 lanes! Thus 
by using a state-of-the-art 16 lane PCIe graphics adapter and a PCIe 
NVMe drive, there are nearly no PCI express 3.0 lanes remaining. When 
adding one or two additional PCIe adapters, one exceeds the 28 available
 PCI express 3.0 lanes by far! In this case, the resulting configuration
 might be error-prone! 	  	 		&nbsp; 	  	 		c.) Thus, considering a.) 
and b.), I strongly recommend to start at least with the i9-7900X, which
 already supportsfour channels DDR4-2666 and also implements 44 PCI 
express 3.0 lanes 	  	 		&nbsp; 	  	 		Further note, that for all 
Skylake-X processors, a sophisticated liquid cooling system is 
absolutely mandatory! For stock speeds something like the 
Corsair&nbsp;H115i&nbsp;might by sufficient. However, if somebody aims 
at OverClocking (OC) of the i9-7900X or Skylake-X Processors above, 
sophisticated Water Blocks for CPU and VRM of e.g.&nbsp;EKWB&nbsp;seem 
absolutely mandatory and unavoidable. 	  	 		&nbsp; 	  	 		My 
Skylake-X/X299 System is up, fully stable and fully functional apart 
from the yet non-functional onboard WLAN (WIFI) module (chipset not 
natively supported by OS X). For Wifi, I therefore use the&nbsp;OSX WIFI
 PCIe Adapter&nbsp;instead. 	  	 		&nbsp; 	  	 		Thanks to a very recent
 iMac Pro dump performed by @TheOfficialGypsy, we now have been able to 
successfully implement the necessary iMacPro1,1 details in both 
Clover_v2.4k_r4369 (thanks to @Sherlocks) and Clover Configurator 
v4.60.0.0 (SMBIOS details, thanks to @Mackie100) by beginning of January
 2018. In collaboration with @macandrea we first achieved the direct 
implementation of macOSHigh Sierra 10.13.2 (17C2120), and now also the 
direct implementation of macOSHigh Sierra 10.13.6 (17G65), which can be 
subsequently updated to macOSHigh Sierra 10.13.6 SU (17G3025) directly 
via the Appstore. 	  	 		&nbsp; 	  	 		Note that with 
AptioMemoryFix.efi, the new Skylake/X299 iMac Pro build now also 
features fully native NVRAM support. No need for EmuVariableUefi-64.efi 
in /EFI/Clover/drivers64UEFI/ to properly transmit the SMBIOS iMacPro1,1
 credentials to Apple. 	  	 		&nbsp; 	  	 		We also reached Native 
Display Brightness Control / Native NightShift Functionality for 
Monitors like the LG 38 inch display with DCC/IC Support thanks to users
 @Bendge and @Ramalama.  	  	 		&nbsp; 	  	 		Since 10.13 SU and with 
AppleIntelPCHPMC, Apple now e.g. implements IOPCIPrimaryMatchID 
"a2af8068" and AppleUSBXHCISPT on the ASUS Prime X299 Deluxe. All 
external and internal XHC USB 3.0 (USB 3.1 Gen 1 Type-A) and USB 2.0 
(USB 2.0 Gen 1 Type-A) ports should work at expected data transfer rates
 on all X299 mainboards.&nbsp; All external and internal USB 3.1 (USB 
3.1 Gen 2 Type-A and Type-C) ports are anyway&nbsp; natively implemented
 on different controllers than XHC and also work at expected data rates.
 Anybody unhappy with the current XHC USB OSX implementation can create a
 board specific XHC USB Kext by following my XHC USB Kext guideline in 
the other&nbsp;forum. 	  	 		&nbsp; 	  	 		The new GC-Titan 
Ridge&nbsp;is now fully implemented including TB XHC USB and TB HotPlug 
functionality with THB_C connected. Even my Thunderbolt HDD drive also 
connects via Apples Thunderbolt 3 to Thunderbolt 2 Adapter and works at 
expected data rates and speeds. 	  	 		&nbsp; 	  	 		Note that actual 
respective X299 EFI-Folder distribution&nbsp;does not contain any 
default audio configuration. You have to implement the audio approach of
 your choice during the Post Installation process in Section E.)! You 
can select between three possible audio implementations detailed in 
section E.3): 1.) The AppleALC audio approach (section E.3.1) bases on 
the&nbsp;most&nbsp;recent&nbsp;versions 
of&nbsp;AppleALC.kext&nbsp;and&nbsp;Lilu.kext&nbsp;and could be 
implemented thanks to the extensive efforts and brilliant work of 
@vit9696 and&nbsp;@apfelnico. &nbsp;2.) The VoodooHDA audio approach 
(section E.3.2) bases on the&nbsp;VoodooHDA.kext 
v2.9.0d10&nbsp;and&nbsp;VoodooHDA.prefPane v1.2. 3.) Finally, @toleda's 
cloverALC audio approach (section E.3.3) bases on 
the&nbsp;realtekALC.kext v2.8&nbsp;and on an additional pathing of the 
native vanilla AppleHDA.kext in the /S/L/E/ directory of the System Disk
 and has been successfully implemented thanks to the instructions and 
help of @Ramalama.&nbsp;The correct HDMI/DP digital Audio 
PCI&nbsp;implementation&nbsp;will be detailed&nbsp;in Section E.9) of 
this guide in line with the HDEF&nbsp;and&nbsp;GPU PCI device 
implementation. 	  	 		&nbsp; 	  	 		The ASUS Prime X299 Deluxe on-board
 Bluetooth is natively supported and also Bluetooth Audio works OoB, 
however due to the non-functionality of the ASUS Prime X299 Deluxe 
on-board Wifi Module, I also use the Bluetooth 4.0 module of 
the&nbsp;OSX WIFI PCIe Adapter, which in line with its natively 
supported Wifi-module also provides native Airdrop, native Handoff and 
native Continuity as well as keyboard support in BIOS/UEFI and Clover 
Boot Loader. A full-featured alternative and more budget friendly 
BT/WIFI solution is the&nbsp;ABWB 802,11 AC WI-FI + Bluetooth 4.0 
PCI-Express (PCI-E) BCM94360CD Combo PCIe Adapter&nbsp;of Flughafen 
Computer especially for our friends in Europe (thanks to @DSM2 for 
providing this information). 	  	 		&nbsp; 	  	 		Thanks to 
the&nbsp;SmallTree-Intel-211-AT-PCIe-GBE.kext, also the Intel I211_AT 
Gigabit on-board LAN controller of the ASUS Prime X299 Deluxe is now 
correctly implemented and fully functional, in addition to the anyway 
natively implemented and of course also fully operational Intel I219-V 
Gigabyte on-board LAN controller of the Asus Prime X299 Deluxe (see 
Section E.8 of my guide). 	  	 		&nbsp; 	  	 		In May 2018, @mm2margeret
 pointed me even to a fully working 10GBit Lan Solution (thanks 
to@mikeboss, @d5aquep and @Mieze) based on the&nbsp;ASUS 
XG-C100C&nbsp;10-Gigabit Ethernet PCIe x4 Adapter. The latter adapter 
employs the same Aquantia AQC107 chip like the iMac Pro. How to 
successfully implement and run the ASUS XG-C100C is detailed in Sections
 E.8.2.1) and E.9.9). In addition, I also successfully implemented and 
tested the&nbsp;Intel X540-T1&nbsp;single port 10GBit LAN PCIe Adapter 
after some Ubuntu modding of it's EEPROM to be compatible with the 
Small-Tree 10GB macOS 10.13 driver (see Sections E.8.2.2 and E.9.9 ). I 
now however use this latter adapter in my X99 rig. The&nbsp;Small-Tree 
P2EI0G-2T&nbsp;2-Port 10GB LAN PCIe Adapter constitutes my actual 10GBit
 LAN implementation, working OoB with the Small-Tree 10GB macOS 10.13 
driver. The 10Gbit NIC connects with a&nbsp;NetGear ProSave 
XS508M&nbsp;8-port 10GBit switch, which further connects with 
a&nbsp;QNAP TS-431X2&nbsp;Quad-core 4-Bay NAS tower with Built-in 10GbE 
SFP+ Port that harbours 4x 12 TB&nbsp;Seagate IronWolf&nbsp;in RAID 0 
configuration (optimised for read/write speed). Let me express my 
gratitude to @gxsolace at this place for providing me with 1x Intel 
X540-T1, 1x Small-tree P2EI0G-2T and 4x 12 TB Seagate IronWolf hardware.
 You are just awesome! 	  	 		&nbsp; 	  	 		 			Excellent news 
concerning CPU Power Management: ASUS, MSI and ASROCK mainboards allow 
now for manually unlocking the MSR 0xE2 BIOS Register along their X299 
mainboard series. The MSR 0xE2 BIOS Register of all Gigabyte mainboards 
is anyway unlocked by factory default.&nbsp;Since BIOS firmware version 
1301, the&nbsp; manual unlocking of the MSR register is also possible 
within any ASUS X299 mainboard BIOS. By this we now achieve fully native
 HWP (Intel SpeedShift Technology) CPU Power Management for all 
Skylake-X processors on all mainboards with unlocked MSR 0xE2 BIOS 
Register, resulting in absolutely brilliant and top-end CPU performance 
(see Section E.1). We&nbsp;however&nbsp;still witness&nbsp;some TSC 
desynchronisation of the Skylake-X threads at boot and wake from S3. 
Until further microcode updates are performed by the mainboard 
manufacturers, we therefore have to use the TSCAdjustRest.kext provided 
by @interferenc in this case. 		  		 			&nbsp; 		  		 			Outstanding 
historical Skylake-X/X299 iMac pro Benchmark Scores finally also depict 
the excellent overall build and and system performance: 		 	  	 		 			
&nbsp; 		  		 			&nbsp; 		  		 			Geekbench i9-7980XE (4.8GHz) CPU 
Benchmark:&nbsp; 		  		  				Multi-Core Sore:&nbsp;65.348 			  			 				
Single-Core Sore:&nbsp;5.910 			  		  			&nbsp; 		   		 			
Cinebench&nbsp;i9-7980XE (4.8GHz)&nbsp;CPU Benchmark: 		  		  				4.618 
CB 			  		  			&nbsp; 		   		 			Geekbench Gigabyte Nvidia GeForce GTX 
1080 Ti WaterForce WB 11GB Xtreme Edition OpenGL and Metal2 
Benchmark:&nbsp; 		  		  				OpenGL Sore:&nbsp;229.965 			  			 				
Metal 2 Sore: &nbsp;242.393 			  		   	 		&nbsp; 	  	 		See Sections 
F.1) and F.2) for further details. 	  	 		&nbsp; 	  	 		All Skylake-X 
Systems harbouring a mainboard with unlocked MSR 0xE2 BIOS Register now 
also posses fully native forced and automated Sleep/Wake Functionality 
not only thanks too a fully developed SSDT implementation and respective
 ACPI replacements.&nbsp; 	  	 		&nbsp; 	  	 		Good new also for all 
users of C422 and XEON-W System. This guide seems also fully compatible 
with your systems 	  	 		&nbsp; 	  	 		&nbsp; 	  	 		Before starting 
with all detailed instructions, please find a Table of Content that 
provides an overview of the individual topics addressed within this 
guide: 	  	 		&nbsp; 	  	 		
--------------------------------------------------------------------------------
 	  	 		&nbsp; 	  	 		 			Table of Contents 		  		 			&nbsp; 		  		 			
A.) Hardware Overview 		  		 			Details about the build configuration 
that states the baseline of this guide. 		  		 			&nbsp; 		  		 			B.) 
Mainboard BIOS 		  		 			B1.) ASUS BIOS Firmware Patching 		  		 			B2.)
 ASUS BIOS Configuration 		  		 			B3.) Gigabyte BIOS Configuration 		  
		 			&nbsp; 		  		 			C.) Important General Note/Advice and Error 
Prevention 		  		 			Hardware and System Configuration recommendations. 
Make sure you've read all of this before complaining that something does
 not work. 		  		 			&nbsp; 		  		 			D.) iMac Pro macOS 10.13 High 
Sierra System Setup 		  		 			This chapter includes a general guideline 
how to perform the initial setup of your iMac Pro with macOS High Sierra
 10.13.6 (17G65). Note that the macOS High Sierra 10.13.6 (17G65) full 
package installer apparently can be only successfully downloaded on 
non-iMacPro systems. For iMacPro systems, there we provide a 
sophisticated workaround that bases on pristine sources from Apple. 		  
		 			D.1) iMac Pro EFI-Folder Preparation 		  		 			D.2) iMac Pro macOS
 High Sierra 10.13.6 (17G65) Installer Package Creation 		  		 			D.3) 
iMac Pro macOS High Sierra 10.13.6 (17G65) USB Flash Drive Installer 
Creation 		  		 			D.4) iMac Pro macOS High Sierra 10.13.6 (17G65) Clean
 Install on Skylake-X/X299 		  		 			D.5) Direct iMac Pro conversions of
 a functional Skylake-X/X299 system with a SMBIOS System Definition 
different from iMacPro1,1 and a standard macOS build implementation 		  
		 			D.6) iMac Pro macOS High Sierra Build Update Procedure 		  		 			
&nbsp; 		  		 			E.) Post Installation Process 		  		 			E.1) HWP (Intel
 SpeedShift Technology) CPU Power Management Configuration 		  		 			
E.2) Graphics Configuration 		  		 			General ATI and Nvidia GPU advices
 including a detailed guideline for Nvidia Web Driver Installation and 
Black Screen Prevention 		  		 			E.3) Audio Configuration 		  		 			Use
 only one of the following, where E.3.1 is recommended by the author. 		
  		 			E.3.1.) AppleALC Audio Implementation 		  		 			E.3.2) VoodooHDA
 Audio Implementation 		  		 			E.3.3) cloverALC Audio Implementation 		
  		 			E.4) USB Configuration 		  		 			including some initial 
benchmarks 		  		 			E.5)&nbsp;GC-Titan Ridge&nbsp;/ GC-Alpine Ridge 
/Asus TBEX 3 PCIe Add-In Implementation 		  		 			E.6) NVMe 
compatibility 		  		 			E.7.) SSD/NVMe TRIM Support 		  		 			Extend the
 life of your SSD and maintained its normal speed 		  		 			E.8) Gbit 
and 10-Gbit Ethernet Implementations 		  		 			E.8.1) ASUS Prime X299 
Deluxe on-board Gbit Ethernet Functionality 		  		 			E.8.2) 10-Gbit LAN
 Implementations 		  		 			E.8.2.1) ASUS XG-C100C Aquantia AQC107 
10-Gbit NIC 		  		 			E.8.2.2) Intel X540-T1 10-Gbit NIC 		  		 			
E.8.2.3) Small-Tree P2EI0G-2T 10-Gbit NIC 		  		 			E.8.2.4) NetGear 
ProSave XS508M 8-port 10-Gbit Switch 		  		 			E.8.2.5) QNAP TS-431X2 
Quad-core 4-Bay NAS tower 		  		 			E.8.2.6) 10-GBit Ethernet 
Optimisation 		  		 			E.9) ASUS Prime X299 Deluxe PCI Device 
Implementation 		  		 			E.9.1) ACPI DSDT Replacement Implementation 		 
 		 			E.9.2) System SSDT PCI Device ImplementationE.9.2.1) - HDEF - 
onboard PCI Audio Controller PCI ImplementationE.9.2.2) - GFX0, HDAU - 
GPU and HDMI/DP Audio PCI implementationE.9.2.3) - PMCR - onboard Power 
Management Controller (PMC) PCI ImplementationE.9.2.4) - USBX - fixing 
XHCI USB Power errors during BootE.9.2.5) - XHCI - onboard Extended Host
 Controller Interface (XHCI) PCI ImplementationE.9.2.6) - XHC2,3,4 - 
ASMedia ASM3142 USB 3.1 Controller PCI ImplementationE.9.2.7) - ANS1, 
ANS2 - Apple NVMe Controller PCI ImplementationE.9.2.8) - SAT1 - Intel 
AHCI SATA Controller PCI ImplementationE.9.2.9) - THSS - Intel Thermal 
Subsystem Controller ImplementationE.9.2.10) XGBE - 10GBit NIC 
ImplementationE.9.2.11) - ETH0/ETH1 - onboard LAN Controller PCI 
ImplementationE.9.2.12) - ARPT - OSX WIFI Broadcom BCM94360CD 802.11 
a/b/g/n/ac + Bluetooth 4.0 AirPort Controller PCI 
ImplementationE.9.2.13) -&nbsp;GC-Titan Ridge&nbsp;/ GC-Alpine Ridge / 
Asus TBEX 3 Thunderbolt HotPlug System ImplementationE.9.2.14) - DTGP 
MethodE.9.2.15) - Debugging Sleep Issues 		  		 			E.10) System Overview
 CPU Cosmetics 		  		 			E.11) iMac Pro Boot Splash Screen Cosmetics 		 
 		 			E.12) iMac Pro Desktop Background cosmetics 		  		 			E.13) 
Native Display Brightness Control / Native NightShift Functionality for 
Monitors with DCC/IC Support 		  		 			E.14) Logic-X and Audio Studio 
Software Functionality 		  		 			E.15) iStatMenus Hardware Monitoring 		
  		 			&nbsp; 		  		 			F.) Benchmarking 		  		 			F.1) Sylake-X Intel 
I9-7980XE CPU Benchmarking 		  		 			F.2) Gigabyte AORUS GTX 1080 Ti 
Waterforce EB 11GB Extreme Edition Benchmarking 		  		 			&nbsp; 		  		 
			G.) Summary and Conclusion 		 	  	 		&nbsp; 	  	 		
--------------------------------------------------------------------------------
 	  	 		&nbsp; 	   	 		Now enjoy and have have fun with the detailed 
guidelines below. Many thanks to [USER=956262]@paulotex[/USER] for 
committing the efforts in providing the Table of Contents detailed 
above. 	   	 		&nbsp; 	     	A.)&nbsp; Hardware Overview     	&nbsp;    
 	    	&nbsp;     	    	&nbsp;     	Mainboard:&nbsp;Asus Prime X299 
Deluxe&nbsp;[380€]     	CPU:&nbsp;i9-7980XE&nbsp;(18 core, 
4.4Ghz)&nbsp;[1.900€]    	 		RAM Memory:&nbsp;Corsair Dominator Platinum
 128GB (8x16GB) DDR4 3200 MHz C16 Kit&nbsp;@3600MHz OC [1.600€] 	  	 		
GPU:&nbsp;Sapphire Nitro+ Radeon RX Vega 64 8GB&nbsp;[600€] 	    	System
 Disks:&nbsp;EVO 970 PRO NVMe M.2 1TB&nbsp;(MacOS)&nbsp; 
[399€];&nbsp;EVO 960 NVMe M.2 1TB&nbsp;(Windows 10) [250€]    	
Thunderbolt 3 Add-in:&nbsp;GC-Titane Ridge&nbsp;40GB/s Intel Thunderbolt
 3 Certified Add-in PCIe Adaptor&nbsp;[90€]    	Power 
Supply:&nbsp;Corsair AX1500i&nbsp;[450€]    	Monitor:&nbsp;LG 
38UC99-W&nbsp;38" curved 21:9 Ultra Wide QHD+ IPS Display (3840 pix x 
1600 pix)&nbsp;[1.350€]    	WebCam:&nbsp;Logitech C930e&nbsp;[80€]    	
Mouse:&nbsp;Apple Magic Mouse 2&nbsp;[75€]    	Keyboard:&nbsp;Apple 
Magic Keyboard Wireless&nbsp;[99€]    	Bluetooth + 
Wifi:&nbsp;PC/HACKINTOSH - APPLE BROADCOM BCM94360CD - 802.11 A/B/G/N/AC
 + BLUETOOTH 4.0&nbsp;[129€]    	Internal USB2.0 HUB:&nbsp;NZXT 
AC-IUSBH-M1T&nbsp;[20€]    	Case:&nbsp;Thermaltake Core X71 Tempered 
Glass Edition Full Tower Chassis&nbsp;[140€]    	&nbsp;    	 		10Gbit 
Ethernet&nbsp;components: 	  	 		- 1x&nbsp;ASUS XG-C100C&nbsp;AQC107 
PCIe x4 10GBit LAN Adapter (for testing purposes) 	  	 		- 1x&nbsp;Intel
 X540-T1&nbsp;single port 10GBit LAN PCIe Adapter (for testing purposes,
 now installed in my X99 rig) 	  	 		- 1x&nbsp;Small-Tree 
P2EI0G-2T&nbsp;2-Port 10GBit LAN PCIe Adapter (now default 
configuration) 	  	 		- 1x&nbsp;NetGear ProSave XS508M&nbsp;8-port 
10GBit switch 	  	 		- 1x&nbsp;QNAP TS-431X2&nbsp;Quad-core 4-Bay NAS 
tower with Built-in 10GbE SFP+ Port and 4x 12 TB&nbsp;Seagate 
IronWolf&nbsp;in RAID 0 configuration. 	  	 		&nbsp; 	  	 		Let me 
express once more my gratitude to @gxsolace at this place for providing 
me with 1x Intel X540-T1, 1x Small-tree P2EI0G-2T and 4x 12 TB Seagate 
IronWolf hardware. 	    	&nbsp;    	CPU/GPU Cooling:&nbsp;Water Cooling 
main components:    	- 1x&nbsp;EK-FB ASUS Prime X299 RGB Monoblock - 
Nickel&nbsp;[117€]    	- 1x&nbsp;EK-CoolStream PE 360 (Triple, 39 mm, 
Roof)&nbsp;[80€]    	- 1x&nbsp;EK-CoolStream Ce 280 (Dual, 45mm, 
Front)&nbsp;[90€]    	- 2x&nbsp;EK-CoolStream XE 360 (Triple, 60 mm, 
Cellar)&nbsp;[220€]    	- 1x&nbsp;XSPC Twin D5 Dual Bay Reservoir/Pump 
Combo&nbsp;[209€]    	- 15x&nbsp;Thermaltake Riing 12 High Static 
Pressure LED Radiator Fan (120mm)&nbsp;[210€]    	- 5x&nbsp;Thermaltake 
Riing 14 High Static Pressure LED Radiator Fan (140mm)&nbsp;[100€]    	-
 3x&nbsp;Phantek PMW Fan Hub (up to 12 fans or 30W power 
consumption)&nbsp;[17€]    	- 1x&nbsp;Alphacool Eisflügel Flow Indicator
 Black G1/4 IG&nbsp;[16€]    	- 1x&nbsp;Phobya Temperatur Sensor G1/4 + 
C/F Display&nbsp;[22€]    	&nbsp;    	 		 	  	 		&nbsp; 	   	 		
----------- 	   	 		Total:&nbsp;8594€ ----------- 	   	 		Compared with:
 	   	 		 	  	 		&nbsp; 	     	B.) Mainboard BIOS     	Please find below
 instructions for the Asus X299 Prime Deluxe BIOS firmware patching 
(Section B.1), a summary of my actual Asus X299 Prime Deluxe BIOS 
settings (Section B.2), and some actual BIOS settings for the Gigabyte 
Designare EX settings (Section B.3).     	&nbsp;     	B1.) ASUS BIOS 
Firmware Patching     	 		&nbsp; 	  	 		 			On a real Mac with native 
OSX XCPM power management, the MSR 0xE2 register is unlocked and 
therefore writeable. However, on ASUS mobos this register was usually 
read only for ages.&nbsp; When the kernel tried to write to this locked 
register, it caused a kernel panic. This panic could happen very early 
in the boot process, with the result that the system freezes or reboots 
during the boot process. We could circumvent the MSR 0xE2 register write
 with a dedicated KernelToPatch entry in the config.plist, namely 
"xcpm_core_scope_msrs © Pike R. Alpha" and by enabling the "KernelPM" in
 the config.plist in Section "Kernel and Kext Patches" of the Clover 
Configurator. 		  		 			&nbsp; 		  		 			Thanks to recent modifications 
in CodeRush's Longsoft UEFIPatch distributions and thanks to three 
sophisticated MSR 0xE2 Register patches provided by @interferenc (partly
 former work of CodeRush, Pike Alpha and Adrian_dsl), we were able to 
successfully patch any ASUS X299 mainboard BIOS firmware distribution 
and unlock the MSR 0xE2 register. The patched ASUS mainboard BIOS 
firmware finally has been uploaded to the specific ASUS X299 mainboard 
by means of the ASUS EZ BIOS Flashback Procedure. This made the 
"xcpm_core_scope_msrs © Pike R. Alpha" KernelToPatch entry obsolete and 
allowed full native read/write MSR 0xE2 register access by the OSX 
kernel. 		  		 			&nbsp; 		  		 			Within ASUS Prime X299 Deluxe BIOS 
firmware 1301, 1401 and 1503, ASUS now allows upon my user request for 
the first time to manually unlock the MSR 0xE2 register within the most 
recent BIOS settings. This makes the ASUS BIOS firmware patching 
obsolete. MSI and ASRock X299 mainboards allowed&nbsp; the manual unlock
 of the MSR 0xE2 BIOS Register right from the beginning and the MSR 0xE2
 BIOS Register of all Gigabyte mainboards is anyway unlocked by factory 
default. However, yet we witness some TSC desynchronisation of the 
Skylake-X threads at boot and wake from S3. Until further microcode 
updates are performed by the mainboard manufacturers, we therefore have 
to use&nbsp; the TSCAdjustRest.kext provided by @inteferenc (see error 
prevention C.4 of this guide) to circumvent this TSC desynchronisation 
issue. 		  		 			&nbsp; 		  		 			By this we achieve fully native HWP 
(Intel SpeedShift Technology) CPU Power Management for all Skylake-X 
processors on all X299 mainboards with unlocked MSR 0xE2 BIOS Register, 
resulting in absolutely brilliant and top-end CPU performance (see 
Section E.1). 		  		 			&nbsp; 		  		 			Before summarising all 
necessary ASUS and Gigabyte BIOS settings,&nbsp; let me provide 
X299D.CAP, the most recent ASUS Prime X299 Deluxe BIOS Firmware 1503 
with an iMacPro Splash Screen Image (see Section E.11), which can be 
flashed by means of the well known ASUS EZ BIOS Flashback procedure. 		 
	    	 		&nbsp; 	   	 		B2.) ASUS BIOS Configuration 	   	 		&nbsp; 	   
	 		Before applying the specific settings, please provide your ASUS X299
 Prime Deluxe with the actual BIOS firmware 1503. 	  	 		&nbsp; 	  	 		
After Updating System time and System Date, enable X.M.P for your DDR4 
modules. Don't forget to enable the EZ XMP Switch previously to this 
step on your ASUS Mainboard! Subsequently switch form the easy to the 
advanced ASUS BIOS Setup mode by pressing F7. 	  	 		&nbsp; 	  	 		 			I
 use all optimized BIOS settings (OoB, no OC yet) despite a few changes 
listed in detail below: 		  		 			&nbsp; 		  		 			1.)&nbsp;/AI Tweaker/
 		  		 			a.) ASUS MultiCore Enhancement:&nbsp;Auto&nbsp;[optional 
"Disabled",&nbsp;see important notification below!] 		  		 			b.) AVX 
Instruction Core Ratio Negative Offset: "3" [optional "Auto",&nbsp;see 
important notification below!] 		  		 			c.) AVX-512 Instruction Core 
Ratio Negative Offset: "2" [optional "Auto",&nbsp;see important 
notification below!] 		  		 			d.) CPU Core Ratio:&nbsp;Sync All 
Cores&nbsp;[optional "Auto",&nbsp;see important notification below!] 		 
 		 			e.)&nbsp;CPU SVID Support:&nbsp;Enabled&nbsp;[fundamental for 
proper IPG CPU power&nbsp;consumption display] 		  		 			f.) DRAM 
Frequency: DDR4-3200MHz 		  		 			&nbsp; 		  		 			
2.)&nbsp;/Advanced/CPU Configuration/ 		  		 			a.) Hyper Threading 
[ALL]: Enabled 		  		 			b.)&nbsp;MSR Lock Control: Enabled&nbsp; 		  		
 			&nbsp; 		  		 			3.)&nbsp;/Advanced/CPU Configuration/CPU Power 
Management Configuration/ 		  		 			a.)&nbsp;Enhanced Intel Speed Step 
Technology (EIST): Disabled 		  		 			b.) Autonomous Core C-States: 
Enabled 		  		 			c.) Enhanced Halt State (C1E): Enabled 		  		 			d.) 
CPU C6 report: Enabled 		  		 			e.) Package C-State: C6(non retention) 
state 		  		 			f.)&nbsp;Intel SpeedShift Technology: 
Enabled&nbsp;&nbsp; (crucial for native HWP Intel SpeedShift Technology 
CPU Power Management) 		  		 			g.) MFC Mode Override: OS Native 		  		 
			&nbsp; 		  		 			4.)&nbsp;/Advanced/Platform Misc 
Configuration/&nbsp;&nbsp; 		  		 			a.) PCI Express Native Power 
Management: Disabled 		  		 			b.) PCH DMI ASPM: Disabled 		  		 			d.) 
ASPM: Disabled 		  		 			e.) DMI Link ASPM Control: Disabled 		  		 			
f.)&nbsp; PEG - ASMP: Disabled 		  		 			&nbsp; 		  		 			
5.)&nbsp;/Advanced/System Agent Configuration/ 		  		 			a.) Intel VT 
for Directed I/O (VT-d): Disabled (see VT-d notification below) 		  		 	
		&nbsp; 		  		 			6.)&nbsp;/Boot/ 		  		 			a.) Fast Boot: Disabled 		 
 		 			b.) Above 4G Decoding:&nbsp;Off 		  		 			c.) Set your specific 
Boot Option Priorities 		  		 			&nbsp; 		  		 			7.)&nbsp;/Boot/Boot 
Configuration 		  		 			a.) Boot Logo Display:&nbsp;Auto (important for 
E.11 - ASUS Boot Splash Screen Cosmetics) 		  		 			b.) Boot up NumLock 
State: Disabled 		  		 			c.) Setup Mode: Advanced 		  		 			&nbsp; 		  
		 			8.)&nbsp;/Boot/Compatibility Support Module/ 		  		 			a.) Launch 
CSM: Disabled 		  		 			&nbsp; 		  		 			9.)&nbsp;/Boot/Secure Boot/ 		 
 		 			a.) OS Type: Other OS 		  		 			&nbsp; 		  		 			With F7 and F10 
you can save the modified BIOS settings. 		  		 			&nbsp; 		  		 			
Important Notes: 		  		 			&nbsp; 		  		 			"ASUS MultiCore 
Enhancement":&nbsp;When set to "Auto", MCE&nbsp; allows you to maximise 
the overclocking performance optimised by the ASUS core ratio settings. 
When disabled, MCE allows to set to default core ratio settings. 		  		 
			&nbsp; 		  		 			"CPU Core Ratio - Sync All Cores":&nbsp;Tremendous 
increase in CPU performance&nbsp;&nbsp;can be achieved with the CPU Core
 Ratio set to "Sync All Cores". In case of i9-7980XE stock settings 
(max. turbo 4.4 Ghz), the&nbsp;Geekbench score difference&nbsp;is 
approx.&nbsp;51.000 (disabled)&nbsp;compared to&nbsp;58.000 
(enabled)!&nbsp;Note however, that Sync All Cores should be used 
only&nbsp;in case of the availability of an excellent and extremely 
sophisticated water cooling system! Otherwise, CPU Core Ratio should be 
set to "Auto". Further note that with CPU Core Ratio set to "Sync All 
Cores", the AVX Instruction Core Ratio Negative Offset must be set to 
"3" and the AVX-512 Instruction Core Ratio Negative Offset must be set 
to "2". Without the correct core ratio offsets, your system might become
 unstable with CPU Core Ratio set to "Sync All Cores"! 		  		 			&nbsp; 
		  		 			VT-d Note:&nbsp;For compatibility with VM or parallels, VT-d 
can be also ENABLED... Verify however, in this case that in your 
config.plist the boot flag "dart=0"&nbsp; is checked under Arguments in 
the "Boot" Section of Clover Configurator! However, it might well be 
that the "dart=0" boot flag is already obsolete. 		  		 			&nbsp; 		  		
 			Intel(R) Power Gadget (IPG) CPU Power Consumption note:&nbsp;for the
 proper display of the CPU Power Consumption in e.g. the Intel(R) Power 
Gadget it is absolutely mandatory to enable both&nbsp;/AI Tweaker/CPU 
SVID Support/. 		  		 			&nbsp; 		  		 			CPU Core Voltage Correction 
for ASUS X299 mainboard users:&nbsp;The ASUS Skylake-X BIOS microcode 
implementation has improved considerably. Former issues with "/AI 
Tweaker/CPU Core Voltage/" set to "Auto", where the assigned CPU Core 
Voltages have been too high by far, have been totally removed. 		 	    	
&nbsp;    	 		Iterative manual approach to derive minimal &nbsp;CPU Core
 Voltages: 	  	 		&nbsp; 	  	 		This iterative approach detailed assumes
 the BIOS settings described in Section B1) - point 1) to 10), however 
by considering the following else optional settings: 	  	 		&nbsp; 	  	 
		i.) "ASUS MultiCore Enhancement" set to "Auto" 	  	 		ii.) "CPU Core 
Ratio" set to "Sync All Cores" 	  	 		iii.) "AVX Instruction Core Ratio 
Negative Offset" set to "3" 	  	 		iv.) "AVX-512 Instruction Core Ratio 
Negative Offset" set to "2" 	    	&nbsp;    	 		1.) Boot into Windows 
and launch&nbsp;ASUS CPU-Z&nbsp;as well as&nbsp;Cinebench. 	  	 		&nbsp;
 	  	 		2.) Run Cinebench CPU benchmarks and watch the&nbsp;Core VID 
values&nbsp;in CPU-Z under CPU max.load conditions. These values will 
usually exceed 1.2V with "/AI Tweaker/CPU Core Voltage/" set to "Auto". 
	    	&nbsp;    	 		3.) To optimise the "/AI Tweaker/CPU Core 
Voltage/"&nbsp; perform the following steps: 	  	 		&nbsp; 	  	 		a.) 
Enter the BIOS, go to "/AI Tweaker/CPU Core Voltage/" and change from 
"Auto" to "Manual" 	  	 		&nbsp; 	  	 		b.) Enter a slightly 
lower&nbsp;CPU Core Voltage Overrride&nbsp;(e.g. typically 0.01 V less) 
than originally observed with CPU-Z under Cinebench CPU benchmark 
max.load conditions in Windows, e.g. 1.190 V in the first iteration. 	  
  	&nbsp;    	 		c.) Reboot into windows and check if the Cinebench CPU 
benchmark scores are still in the expected range by also controlling the
 respective&nbsp;Core VID&nbsp;values during the Cinebench CPU benchmark
 max. load conditions 	  	 		&nbsp; 	  	 		d.) Repeat b.) and c.) until 
either your Cinebench CPU benchmarks scores start to significantly 
decrease or you start facing problems in booting your system.&nbsp; 	  	
 		&nbsp; 	  	 		Given my personal experience with the i9-7980XE, 
a&nbsp;CPU Core Voltage Override&nbsp;of&nbsp;1.120 V&nbsp;was optimal 
for a stock 4.4 GHz stock turbo frequency. In case of OC, the minimal 
CPU Core Voltage easily exceeded 1.2 V. 	    	&nbsp;    	 		
Warning!&nbsp; 	  	 		&nbsp; 	  	 		Before performing the CPU Core 
Voltage Override Value Optimisation Approach, save your actual BIOS 
settings to a USB Drive. If during the iterative approach you are not 
able to successfully boot your system, perform a CMOS reset and restore 
your BIOS settings from the USB Drive, by subsequently entering the last
 successful&nbsp;CPU Core Voltage Override&nbsp;value! 	  	 		&nbsp; 	  
	 		Too high voltages can severely damage your CPU!&nbsp;In any case, 
when performing OC, a sophisticated water block circuit is absolutely 
mandatory! Always watch also your CPU temps when performing the CPU Core
 Voltage Optimisation, which should not exceed 90 deg C under CPU max. 
load conditions! 	    	&nbsp;    	Many thanks to @DSM2 for all his 
comments, valuable input, and proposed solutions.    	&nbsp;    	&nbsp; 
   	B.3) Gigabyte BIOS Configuration    	&nbsp;    	Please find below 
the BIOS settings for the Gigabyte Designare EX kindly provided by 
@jyavenard and @DSM2.    	&nbsp;    	 		1.)&nbsp;/M.I.T/Advanced 
Frequency Settings/ 	  	 		a.) Extreme Memory Profile: (X.M.P): Profile1
 	  	 		&nbsp; 	  	 		2.)&nbsp;/M.I.T/Advanced Frequency 
Settings/Advanced CPU Core Settings 	  	 		&nbsp; 	  	 		a.) Active 
Cores Control: Auto 	  	 		b.) Hyper-Threading Technology: Enabled 	  	 
		c.) Intel Turbo Boost Max Technology 3.0 : Enabled 	  	 		d.)&nbsp; 
Intel Speed Shift Technology : Enabled 	  	 		e.) Enhanced Multi-Core 
Performance: enabled/disabled (optional; consider warning in Section 
B.2) - ASUS BIOS Settings) 	  	 		f.) CPU Enhanced Halt (C1E): Enabled 	
  	 		g.) C6/C7 State Support: Enabled 	  	 		h.) Package C State limit:
 C6 	  	 		i.) CPU EIST Function: Enabled 	  	 		j.)&nbsp; Energy 
Efficient Turbo : Disabled 	  	 		&nbsp; 	  	 		3.)&nbsp;/M.I.T/Advanced
 Memory Settings/ 	  	 		a.) Extreme Memory Profile (X.M.P): Profile1 	 
 	 		&nbsp; 	  	 		4.)&nbsp;/BIOS/ 	  	 		a.) Boot Numlock State: 
Disabled/Enabled (optional) 	  	 		b.) Security option: Setup 	  	 		c.)
 Full Screen Logo Show: Enbabled 	  	 		d.) Fast Boot: Disabled 	  	 		
e.) CSM Support: Disabled 	  	 		&nbsp; 	  	 		5.)&nbsp;/BIOS/Secure 
Boot/ 	  	 		a.) Secure Boot Enable: Disabled 	  	 		&nbsp; 	  	 		
6.)&nbsp;/Peripherals/USB Configuration/ 	  	 		a.) XHCI Hand-off: 
Enabled 	  	 		&nbsp; 	  	 		7.)&nbsp;/Peripheral/Thunderbolt 
Configuration/&nbsp;(Designare EX only) 	  	 		a.) Security Level : SL0 -
 No Security 	  	 		&nbsp; 	  	 		8.)&nbsp;/Chipset/ 	  	 		a.) VT-d: 
Disabled/Enabled (optional,&nbsp;see VT-d notification in Section B.2) -
 ASUS BIOS settings) 	  	 		&nbsp; 	  	 		9.)&nbsp;/Save&amp; Exit/ 	  	
 		a.) Save &amp; Exit 	    	&nbsp;    	&nbsp;    	C.)&nbsp;Important 
General Note/Advice and Error Prevention    	&nbsp;    	Please note the 
following important General Note / Advice and Error Prevention, when 
setting up your Skylake-X/X299 System and implementing the latest macOS 
High Sierra distribution.    	&nbsp;    	 		1.) 
The&nbsp;/EFI/Clover/drivers64UEFI/-directory of my&nbsp;actual 
respective X299 EFI-Folder distribution&nbsp;contains by 
default&nbsp;AptioMemoryFix.efi thanks to&nbsp;@vit9696.&nbsp;Note that 
with Clover_v2.4k_r4392, AptioMemoryFix.efi has become an official 
Customization Option of Clover and can now be selected and therefore 
also just easily implemented in the frame of the Clover Boot Loader 
Installation. 	   	 		&nbsp; 	   	 		For native NVRAM implementation, 
Clover's RC Scripts have to be omitted during the clover boot loader 
installation. If already previously installed, remove Clover's RC 
Scripts from the /etc directory of your macOS USB Flash Drive Installer 
or System Disk: 	   	 sudo rm -rf /etc/rc.boot.d sudo rm -rf 
/etc/rc.shutdown.d  	 		&nbsp; 	   	 		Also the&nbsp;"slide" boot flag 
needs to be disabled. 	   	 		&nbsp; 	   	 		2.a.) Most&nbsp;ATI GPUs, 
e.g. RX Vega 64, RX Vega Frontier, RX 580, RX 560 are supposed to be 
"natively" implemented. It is commonly recommended not to use RX 560 and
 RX 580 GPUs due to the lacking iGPU implementation when using SMBIOS 
iMacPro1,1. 	   	 		&nbsp; 	  	 		By means of my Vega SSDT PCI device 
implementation outlined in Section 9.2.2,&nbsp; all available ports on 
the Gigabyte Vega 64 (3x HDMI, 3x DP), including multi-monitor support 
and display hot plug are automatically and successfully implemented. 
However, it seems that DP-port issues (black screen) remain, when 
employing the respective Vega SSDT PCI device implementation on Sapphire
 Nitro+ Vega 64 (2x HDMI, 2xDP) or ASUS Strix Vega 64 (2x HDMI, 2x DP, 
1x DVI) GPUs, which only can be removed by adding Whatevergreen.kext. 
Within such configuration, multi-monitor support and display hot plug 
can be fully achieved also in case of the latter custom Vegas (both 
10.13.6 SU and 10.14.2). A fall-back to the formerly used Kamarang frame
 buffer SSDT implementation of @apfelnico&nbsp;does not provide any 
valuable solution for these kind of custom Vegas. Also note that 
Whatevergreen.kext only seems required for all Vegas possessing less 
than 6 physical ports (including the original Vegas like Frontier and 
Vega 64), else the current Vega SSDT PCI device implementation does 
pretty well it's job. 	  	 		&nbsp; 	  	 		Important additional comment 
for all Vega users with 4K monitors though: when connecting a Vega with 
e.g. the LG 38UC99-W (WUHD, 3840 pix x 1600 pix) via one of the Display 
Ports (DPs), the screen resolution is fine under both Windows 10 and 
macOS High Sierra but is totally at odd during boot (VGA like boot 
screen resolution). The VEGA DP 4K boot screen resolution issue is 
neither related with the fact that the LG 38UC99-W is an ultra-wide 
(3840x1600) and not a true UHD (3840x2160) monitor nor related to any 
likely apparent issue with the ASUS Prime X299 Deluxe firmware. It is 
definitely a Vega firmware problem in combination with most 4K displays,
 as the DP 4K boot screen resolution issue is totally absent with my 
Nvidia GPU and the problem also does not only affect the ASUS Splash 
Screen but also spreads over the entire boot process until the login 
screen is reached (Windows and macOS). Splash Screen, Apple logo or 
verbose boot messages are not stretched but rather have VGA like 
resolution. Any fix of the AMD vBIOS would be highly appreciated. It is 
more than disappointing to witness such issues with 600-1000$ GPUs... 
Fortunately, the 4K boot screen issue is restricted to the Vega DP ports
 and likely due to the fact that the LG 38UC99-W only supports DP 1.2. 
Solution: Connect your Vega and your 4K display via the HDMI port. The 
30 Hz HDMI monitor frequency issue under 10.13 is successfully removed 
under Mojave: monitor frequency of 60 Hz with the display connected via 
HDMI (in contrary to 75 Hz via DP). 	  	 		&nbsp; 	   	 		b.) 
Also&nbsp;Nvidia Kepler Graphics Cards&nbsp;are natively 
implemented.&nbsp; 	  	 		&nbsp; 	  	 		c.) All Users with&nbsp;Maxwell 
and Pascal Nvidia Graphics Cards&nbsp;Users&nbsp;and SMBIOS MacPro1,1 
can employ officially distributed Nvidia 10.13 Web Drivers for their 
Nvidia Pascal and Maxwell graphics cards! Upon my request from 7 January
 2018, Nvidia officially released first WebDriver-387.10.10.10.25.105 
for 10.13.2 (17C2120) and first WebDriver-387.10.10.10.25.106 for 
10.13.2 SA (17C2205) - Supplemental Update on 11 January 2018. On 25 
January 2018, Nvidia released a Web Driver 387.10.10.10.25.157 for 
10.13.3 (17D2047), which worked flawless with Pascal GPUs (lagging 
issues have been reported for Maxwell GPUs). On 20 February 2018, Nvidia
 released a Web Diver 387.10.10.10.30.159 for 10.13.3 SA (17D2102). On 
31 March 2018 and 18 April 2018, Nvidia also released Web Driver 
387.10.10.10.30.103 and 387.10.10.10.30.106 for 10.13.4 (17E199). On 25 
April 2018,&nbsp; Web Driver 387.10.10.10.30.107 has been released for 
10.13.4 SU (17E202). On 02 June 2018, finally we Driver 
387.10.10.10.35.106 followed for 10.13.5 (17F77). On 11 July 2018, 
Nvidia released 10.13.6 
(17G65)&nbsp;WebDriver-387.10.10.10.40.105.&nbsp;Since&nbsp;2 November 
2018, there is&nbsp;finally also a&nbsp;web driver for 10.13.6 SU 
(17G3025) and (17G4015). 	    	&nbsp;    	3.) Avoid any MacOS 
assignments in KextToPatch and KernelToPatch entries implemented in 
the&nbsp; "Kernel and Kext Patches" Section of the Clover Configurator. 
If subsequently in my Guide you still find MatchOS assignments in 
respective figures or text, just ignore all likely yet persistent 
MatchOS assignments. In the config.plist of my actual respective X299 
EFI-Folder distribution, all MatchOS assignments have been definitely 
removed.    	&nbsp;    	4.) If you have the Thunderbolt EX3 or Gigabyte 
Alpine Ridge PCIe extension card already successfully connected with 
your mainboard and properly implemented in your system, disconnect any 
Thunderbolt device during the macOS installation/upgrade procedure. 
However, if any Thunderbolt PCIe extension card has not been properly 
configured and implemented yet in your system, remove the card for the 
macOS Upgrade or Clean Install procedure.    	&nbsp;    	5.) Note that 
on some systems it might be necessary to check the KernelPM Option in 
the "Kernel and Kext Patches Section" of the Clover Configurator to 
successfully boot the respective system. Note that in the config.plist 
of the EFI-Folder attached below, this option is unchecked, as it is not
 required in case of the ASUS Prime X299 Deluxe.    	&nbsp;    	 		 			
6.) The /EFI/Clover/drivers64UEFI/-directory of all former 
EFI-distributions&nbsp;contains&nbsp;a patched version of the actual 
apfs.efi. The actual apfs.efi can be obtained by following the 
respective guideline detailed below: 		  		 			&nbsp; 		  		 			
Right-click with your mouse on the "Install macOS High Sierra.app" and 
select "Show Package Contents" -&gt; click with the mouse on "Contents" 
and subsequently on "Shared Support" -&gt; double-click with the mouse 
on "BaseSystem.dmg" for mounting. 		  		 			&nbsp; 		  		 			Go to "usr"
 -&gt; "standalone" -&gt; "i386". Drop the apfs.efi to your Desktop. 		 
 		 			&nbsp; 		  		 			To patch the apfs.efi for non-verbose boot, 
follow&nbsp;THIS LINK. Credits to @PMheart and @ermac. 		  		 			&nbsp; 
		  		 			 				Note however, that the entire apsf.efi approach detailed 
above recently has become totally obsolete. Thanks to the ApfsSupportPkg
 developed by @acidenthera&nbsp;&amp; Co. and thanks to it's recent 
implementation to Clover (thanks to @Slice, @Philip Petev&nbsp;&amp; 
Co.) in form of&nbsp;ApsfDriverLoader.efi, there is no further need of 
the former&nbsp;apsf.efi in&nbsp;the /EFI/Clover/drivers64UEFI/ 
directory.&nbsp;&nbsp; 			  			 				&nbsp; 			  			 				   			 				
&nbsp; 			  			 				The actual 
Clover&nbsp;distribution&nbsp;package&nbsp;including the 
ApsfDriverLoader.efi&nbsp;can by build by means of the 
Build_Clover.command available on Gitub.&nbsp;Since Version 4.8.8, the 
latter script also can be used with 10.14 and Xcode 10 +Xcode 10 Command
 Line Tools thanks to @vector sigma. By&nbsp;adding&nbsp; 			  			 				 
export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" &amp;&amp; 
buildclover 				to the script, 			  			 				&nbsp; 			  			 				 			  		
	 				&nbsp; 			  			 				the latter also can be used in case of Brew, 
QT5, UEFITool or&nbsp;MacPorts implementations like Latex, X11, gcc, 
etc. not yet fully compatible with 10.14 Mojave. Again thanks to @vector
 sigma&nbsp;for also providing/enabling&nbsp;this&nbsp;trick/possibility
 .&nbsp; 			 		 	    	&nbsp;    	7.)&nbsp;To avoid Skylake-X&nbsp;thread
 TSC desynchronisation&nbsp;errors during&nbsp;boot and wake from S3, 
likely induced by yet erroneous&nbsp;Skylake-X BIOS microcode 
implementations, we need to use TSCAdjustReset.kext provided by 
@interferenc in the /EFI/CLOVER/kexts/Other/ directory of both USB Flash
 Drive and System Disk.&nbsp;    	&nbsp;    	All ASUS Prime X299 Deluxe 
users with patched BIOS firmware 1301 can skip point 7.), as the applied
 patches of @interferenc also resolve all Skylake-X TSC 
desynchronisation errors during boot and wake from S3.    	&nbsp;    	To
 access TSCAdjustRest.kext, download primarily its source distribution 
from Github with the following terminal command:    	 git clone 
https://github.com/interferenc/TSCAdjustReset  	 		&nbsp; 	   	 		
Subsequently copy the TSCAdjustRest source distribution to your Desktop 
using the following terminal command: 	   	 mv /TSCAdjustReset ~/Desktop
  	 		&nbsp; 	   	 		Now change in the terminal to the TSCAdjustReset 
source distribution on your Desktop with the following terminal command:
 	   	 cd ~/Desktop/TSCAdjustReset/  	 		&nbsp; 	   	 		Now compile the 
source distribution with Xcode by using the following terminal command: 
	   	 xcodebuild  	 		&nbsp; 	  	 		 			After successful compilation, 
you will find the TSCAdjustRest.kext in 
~/Desktop/TSCAdjustReset/build/Release/ 		  		 			&nbsp; 		  		 			
Please note that the TSCAdjustRest.kext by default is configured for a 
8-core CPU (16 threads) like the i7-7820X. To adopt the kext for 
Skylake-X processers with more or less cores than 8 cores, apply the 
following approach: 		  		 			&nbsp; 		  		 			a.) Right-click with the 
mouse on the TSCAdjustRest.kext file and select "Show Packet Contents". 
		  		 			&nbsp; 		  		 			b.) Double-click with the mouse on /contents/
 . After a right-click on the "Info.plist" file, select "Open with 
/Other". Select the TextEdit.app and edit the "Info.plist" file. 		  		 
			&nbsp; 		  		 			c.) Use the "find"-function of TextEdit.app and 
search for the term "IOCPUNumber" 		  		 			&nbsp; 		  		 			d.) Note 
that the adequate IOCPUNumber for your particular Skylake-X processor is
 the number of its threads -1, by always keeping in mind that the number
 of it's threads is always 2x the number of it's cores. 		  		 			&nbsp;
 		  		 			Thus in case of the 8 core i7-7820X, the IOCPUNumber is 15 
(16 threads - 1). 		 	    	&nbsp;    	 
&lt;key&gt;IOCPUNumber&lt;/key&gt; &lt;integer&gt;15&lt;/integer&gt;    
	&nbsp;    	By following this methodology, the correct IOCPUNumber for 
the 10-core i9-7900X would be 19 (20 threads -1).    	&nbsp;    	 
&lt;key&gt;IOCPUNumber&lt;/key&gt; &lt;integer&gt;19&lt;/integer&gt;    
	&nbsp;    	and the IOCPUNumber for the 18-core i9-7980XE would result 
in 35 (36 threads -1).    	&nbsp;    	 
&lt;key&gt;IOCPUNumber&lt;/key&gt; &lt;integer&gt;35&lt;/integer&gt;    
	&nbsp;    	e.) After adopting the IOCPUNumber for your particular 
Skylake-X processor, save the info.plist file and copy the modified 
TSCAdjustRest.kext to the /EFI/CLOVER/kexts/Other/ - directories of both
 USB Flash Drive Installer and System Disk and you are save and all 
done!    	&nbsp;    	&nbsp;    	 		8.) Already during the first Beta 
Versions of macOS 10.13 High Sierra, Apple forced the beta users to use 
the new Apple file system APFS in case of a Clean Install/update of 
MacOS High Sierra 10.13. Also within macOS High Sierra 10.13.6 (17G65) 
and 10.13.6 SU&nbsp;(17G3025) this is the case.&nbsp; Most APSF 
incompatibilities with available system related software apparently have
 been already removed. All recent versions &nbsp;of&nbsp;Carbon Copy 
Cloner&nbsp;(CCC) support the direct cloning of APFS system disks and 
provide the previously missing option for APFS system backups. Until 
Boot-Loader Distribution Clover_v2.4k_r4210, it was also impossible to 
install the Clover Boot-Loader in the EFI-Partition of an APFS System 
Disk by means of the Clover Boot-Loader Installer Package (the Clover 
Boot-Loader files had to be added manually). However, all 
recent&nbsp;Clover Boot-Loader Distributions&nbsp;work absolutely 
flawless with APFS System Disks. 	  	 		&nbsp; 	  	 		In any case, with 
@Brumbear's&nbsp;UnSolid.kext&nbsp;in the /EFI/Clover/kexts/Other/ 
directory, OSX is forced to remain with the HFS+ file format when 
installing or updating to the most recent macOS 10.13 
distribution.&nbsp; 	  	 		&nbsp; 	  	 		Note that there is no way to 
convert an APFS disk back to HFS+ without the loss of all data, but one 
can easily reformat an APFS formatted disk to HFS+ under OSX by using 
either Apple's Disk Utility App or "diskutil" commands. All you need to 
do is to previously unmount the APFS volume before erasing it with a 
journaled HFS+ file system and a GRUB Partition Table (GTP). If you want
 to maintain the disk's content, perform a backup before erasing the 
disk with a HFS+ format. 	  	 		&nbsp; 	  	 		The application of Apple's
 Disk utility is straight forward. The&nbsp; "diskutil" equivalent is 
detailed below: 	    	&nbsp;    	In the Terminal app, type:    	 
diskutil list    	&nbsp;    	 		In the output which you can read by 
scrolling back, you will find all internal disks 
named&nbsp;/dev/disk0,&nbsp;/dev/disk1, depending upon how many physical
 disks are present in your system. 	  	 		&nbsp; 	  	 		Make a note of 
the disk identifier for the disk you intend to format (you can eliminate
 risk by removing all disks but the intended target). 	  	 		&nbsp; 	  	
 		In the Terminal app, type: 	    	 diskutil unmount /dev/diskX  	 		
&nbsp; 	   	 		where&nbsp;diskX&nbsp;is a place holder for the disk to 
be unmounted. 	  	 		&nbsp; 	  	 		 			Now delete the APFS container 
of&nbsp;diskX: 		  		 			 diskutil apfs deleteContainer /dev/diskX  			 
				&nbsp; 			  		 	  	 		Subsequently, you can erase the entire disk 
with HFS+ and a GPT by typing the following terminal command: 	    	 
diskutil partitionDisk /dev/diskX 1 GPT jhfs+ "iMacPro" R  	 		&nbsp; 	 
 	 		where&nbsp;/dev/diskX&nbsp;is again a place holder for disk to be 
erased and&nbsp;iMacPro&nbsp;would be the label for the single partition
 created. The remaining&nbsp;1 GPT jhfs+&nbsp;and&nbsp;R&nbsp;arguments 
tell diskutil to create a single partition, within a GUID partition 
table, formatted as Journaled HFS+ and using the entire disk, 
respectively. 	  	 		&nbsp; 	  	 		Alternatively one can also use the 
following terminal command: 	    	 diskutil partitionDisk /dev/diskX GPT
 JHFS+ iMacPro 0b  	 		&nbsp; 	   	 		where&nbsp;/dev/diskX&nbsp;is 
again a place holder for disk to be erased and&nbsp;iMacPro&nbsp;is 
again the label for the disk partition created. The&nbsp;GPT 
HFFS+&nbsp;and&nbsp;0b&nbsp;arguments again tell diskutil to create a 
single partition, within a GUID partition table, formatted as Journaled 
HFS+ and covering the entire disk, respectively. 	  	 		&nbsp; 	  	 		In
 the Terminal app, type now: 	  	 diskutil mount /dev/diskX   	 		&nbsp;
 	  	 		where diskX is again a place holder for the disk to be 
remounted. 	  	 		&nbsp; 	  	 		Note, that by means of the "diskutil 
approach", brand new unformatted or not compatibly formatted system 
NVMe, SSD and HDD system drives can be also directly formatted within 
the macOS Clean Install procedure. When presented with the initial 
install screen where you are presented options to&nbsp;Restore From 
Backup&nbsp;or&nbsp;Install, select&nbsp;Terminal&nbsp;from 
the&nbsp;Utilities&nbsp;menu bar item; 	  	 		&nbsp; 	  	 		The 
"diskutil" terminal approach is also able to convert a HFS+ macOS High 
Sierra 10.13 System Disk to APFS. To do so enter the following terminal 
command: 	    	 diskutil apfs convert /dev/diskX    	&nbsp;    	 		where
 diskX is again a place holder for the HFS+ disk to be converted to 
APFS. The same procedure again can also be directly performed by means 
of Apple's Disk Utility. 	  	 		&nbsp; 	  	 		If you opt for an APFS 
System Disk implementation, please note that all other disks on your 
system also should be formatted with APFS. On systems with APFS disks 
and non-APFS disks, the boot duration will increase, as apsf.efi will 
perform a fsck check of non-AFPS disks (like HFS+ or Fat32) during boot.
 However, dual boot APFS Systems with an NTFS Windows System Disk are 
not effected by the apsf.efi issue, as OSX does not know how to properly
 deal with NTFS. 	    	&nbsp;    	9.) All ASUS Prime X299 Deluxe users, 
who enabled the second LAN controller in the ASUS Prime X299 Deluxe 
BIOS, are advised to download, unzip and copy 
the&nbsp;SmallTree-Intel-211-AT-PCIe-GBE.kext&nbsp;to the EFI-Folders of
 both USB Flash Drive Installer and 10.13 System Disk, or to disable the
 second LAN port in the BIOS during the MacOS Installation.    	&nbsp;  
  	 		10.) Lilu and Lilu Plugin distribution remarks: 	  	 		&nbsp; 	  	
 		To access, download and compile the&nbsp;actual but not yet 
officially released Lilu and Lilu plugin distributions, follow these 
links: 	  	 		&nbsp; 	  	 		a.)&nbsp;Lilu Source distribution 	  	 		
b.)&nbsp;AppleALC Source Distribution 	  	 		
c.)&nbsp;NvidiaGraphicsFixup 	  	 		d.)&nbsp;Whatevergreen 	  	 		&nbsp;
 	  	 		To successfully compile the AppleALC, NvidiaGraphicsFixup and 
Whatevergreen source code distributions with Xcode 9.3 under macOS High 
Sierra 10.13.4 SU (17E202), download, unzip and copy the respective 
actual&nbsp;Lilu DEBUG&nbsp;distribution to the AppleALC, 
NvidiaGraphicsFixup and Whatevergreen source code distribution 
directories. To compile the respective Lilu, AppleALC, and 
NvidiaGraphicsFixup source code distributions just execute the terminal 
command "xcodebuild" after changing to the respective source code 
distribution with the "cd" terminal command. The resulting compiled 
kexts can be always found in the respective /build/Release/ 
sub-directories of the respective source code distribution directories. 
	  	 		&nbsp; 	  	 		Further details to the topic can be accessed by 
following&nbsp;THIS LINK. 	  	 		&nbsp; 	  	 		11.) To clearly get 
kernel panic images with a call trace in case of kernel panics, I 
implemented (checked) boot flags "debug=0x100" and "keepsyms=1" in the 
config.plist of&nbsp;my&nbsp;actual respective X299 EFI-Folder 
distribution&nbsp;in the "Boot" Section of Clover Configurator under 
"Arguments". 	  	 		&nbsp; 	  	 		12.)&nbsp;Note that 
in&nbsp;my&nbsp;actual respective X299 EFI-Folder distribution, I also 
removed&nbsp;CsmVideoDxe-64.efi from /EFI/CLOVER/drivers64UEFI, as the 
latter file is only required for proper Legacy screen resolution 
purposes with CSM enabled, which is definitely not&nbsp; our case. 	  	 
		&nbsp; 	  	 		13.) All Gigabite mainboard users need to add the 
"npci=0x2000" boot flag to their config.plist by checking the latter in 
Section "Boot" of Clover Configurator under "Arguments". 	  	 		&nbsp; 	
    	 		&nbsp; 	   	 		D.) iMac Pro macOS 10.13 High Sierra System Setup
 	  	 		&nbsp; 	  	 		Below, one finds a detailed description for the 
Clean Install of macOS High Sierra 10.13.6 (17G65) - special iMacPro 
build (D.4). This also includes the iMacPro EFI-Folder Preparation (D.1)
 as well as the macOS High Sierra 10.13.6 (17G65) Installer Package 
(D.2) and macOS macOS High Sierra 10.13.6 (17G65) USB Flash Drive 
Installer Creation (D.3). One also finds instructions for a direct iMac 
Pro conversion of a functional Skylake-X/X299 system with a SMBIOS 
System Definition different from iMacPro1,1 and a standard macOS build 
implementation (D.5), as well as for the subsequent iMac Pro macOS High 
Sierra Update Procedure. 	  	 		&nbsp; 	  	 		D.1) iMac Pro EFI-Folder 
Preparation 	  	 		&nbsp; 	  	 		In order to successfully boot a macOS 
USB Flash Drive Installer or System Disk on a Hackintosh system, both 
drives must be equipped with an EFI-Folder in their EFI partitions. In 
this Section we will prepare a fully equipped EFI-Folder with SMBIOS 
iMacPro1,1 System definition. 	  	 		&nbsp; 	  	 		1.) Download and 
unzip&nbsp;my&nbsp;actual respective X299 EFI-Folder 
distribution&nbsp;and copy the therein contained EFI-Folder to your 
Desktop. 	  	 		&nbsp; 	  	 		2.) Open the config.plist in /EFI/Clover/ 
with the latest version of Clover Configurator (&gt;/= v.4.60.0), 
proceed to the "SMBIOS" Section and complete the SMBIOS iMacPro1,1 
Serial Number, Board Serial Number and SMUUID entries. These details are
 mandatory to successfully run iMessage and FaceTime on your iMac Pro 
System. Note that all other iMacPro1,1 SMBIOS Details&nbsp; are already 
implemented in the config.plist of my&nbsp;actual respective X299 
EFI-Folder distribution. 	  	 		&nbsp; 	  	 		Press several times the 
"Generate New" Button next to serial number text field. 	  	 		&nbsp; 	 
 	 		Open a terminal, enter repeatedly the command "uuidgen",&nbsp;and 
copy the output value to the SMUUID field in the "SMBIOS" Section of the
 Clover Configurator. 	  	 		&nbsp; 	  	 		Users of mainboards with 
locked MSR Register (disabled MSR OSX Kernel write access) have to 
enable the xcpm_pkg_scope_msrs © Pike R. Alpha Kernel patch in their 
config.plist under "KernelToPatch" in Section "Kernel and Kext Patches" 
of Clover Configurator. 	  	 		&nbsp; 	  	 		Enable "PluginType" in your
 config.plist under SSDT/Generate Options/ in Section ACPI of Clover 
Configurator for a fully working XCPM implementation. Note that by this,
 Pike Alpha's former ssdt.aml XCPM implementation becomes totally 
obsolete. 	  	 		&nbsp; 	  	 		Enable USB port limit patch:Valid USB 
port limit patch for 10.13.6 SU provided by ©PMHeart and hardwired but 
yet disabled in my respective EFI-Folder distribution: 	  	 		&nbsp; 	  
	 		 kext     : com.apple.driver.usb.AppleUSBXHCI Find     : 837D880F 
0F83A704 0000 Replace  : 837D880F 90909090 9090 Name     : USB Port 
Limit Patch ©PMHeart 	  	 		&nbsp; 	  	 		Finally save the modified 
config.plist. 	  	 		&nbsp; 	  	 		3.) Users of unpatched mainboards 
have to copy the appropriate TSCAdjustRest.kext, which has been modified
 in error prevention C.7), to the /EFI/CLOVER/kexts/Other/ directory of 
the EFI-Folder. 	  	 		&nbsp; 	  	 		You know have a fully equipped 
EFI-Folder for subsequent implementations as detailed below. 	  	 		
&nbsp; 	  	 		D.2) iMac Pro macOS High Sierra 10.13.6 (17G65) Installer 
Package Creation&nbsp; 	  	 		&nbsp; 	  	 		If you are not able to 
successfully download the macOS High Sierra 10.13.6 (17G65) full package
 installer (5.22 GB) from the Appstore, follow the individual steps 
detailed below: 	  	 		&nbsp; 	  	 		1.) Open a terminal and create a 
"091-94326" directory on your Desktop. Subsequently change to the newly 
created directory. All this can be done with the following terminal 
commands: 	  	 		 mkdir ~/Desktop/091-94326/ cd ~/Desktop/091-94326/  		
 			&nbsp; 		  	  	 		2.) Download the following files from the Apple 
server (public links) to your ~/Desktop/091-86775/ directory&nbsp;by a 
copy &amp; paste of the following terminal commands: 	  	 		 curl 
https://swdist.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/091-94326.English.dist
 -o 091-94326.English.dist curl 
https://swdist.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/RecoveryHDMetaDmg.pkm
 -o RecoveryHDMetaDmg.pkm curl 
http://swcdn.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/RecoveryHDMetaDmg.pkg
 -o RecoveryHDMetaDmg.pkg curl 
http://swcdn.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/OSInstall.mpkg
 -o OSInstall.mpkg curl 
https://swdist.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/InstallAssistantAuto.pkm
 -o InstallAssistantAuto.pkm curl 
http://swcdn.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/InstallAssistantAuto.pkg
 -o InstallAssistantAuto.pkg curl 
http://swcdn.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/BaseSystem.dmg
 -o BaseSystem.dmg curl 
https://swdist.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/InstallESDDmg.pkm
 -o InstallESDDmg.pkm curl 
http://swcdn.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/InstallESDDmg.pkg
 -o InstallESDDmg.pkg curl 
http://swcdn.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/BaseSystem.chunklist
 -o BaseSystem.chunklist curl 
http://swcdn.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/InstallESDDmg.chunklist
 -o InstallESDDmg.chunklist curl 
http://swcdn.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/InstallInfo.plist
 -o InstallInfo.plist curl 
http://swcdn.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/AppleDiagnostics.chunklist
 -o AppleDiagnostics.chunklist curl 
http://swcdn.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/AppleDiagnostics.dmg
 -o AppleDiagnostics.dmg curl 
https://swdist.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/MajorOSInfo.pkm
 -o MajorOSInfo.pkm curl 
http://swcdn.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/MajorOSInfo.pkg
 -o MajorOSInfo.pkg curl 
http://swcdn.apple.com/content/downloads/29/03/091-94326/45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7/InstallAssistantAuto.smd
 -o InstallAssistantAuto.smd  		 			&nbsp; 		  	  	 		The full list of 
package files can be found within the following catalog URL, searching 
for key "45lbgwa82gbgt7zbgeqlaurw2t9zxl8ku7": 	  	 		&nbsp; 	  	 		
https://swscan.apple.com/content/catalogs/others/index-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog.gz
 	  	 		&nbsp; 	  	 		&nbsp; 	  	 		3.) Create the installer.pkg on your
 Desktop with the following terminal command: 	  	 		 cd .. productbuild
 --distribution ./091-94326/091-94326.English.dist --package-path 
./091-94326/ installer.pkg  		 			&nbsp; 		  	  	 		4.) Create the 
"Install MacOS High Sierra.app" in the /Applications folder of your 
System Disk with the following terminal command: 	  	 		 sudo 
/usr/sbin/installer -pkg installer.pkg -target /  		 			&nbsp; 		  	  	 
		In case that you receive an error message, ignore the latter and 
proceed with 5.) 	  	 		&nbsp; 	  	 		5.) Now add the following files to
 your "Install High Sierra.app" with the following terminal commands: 	 
 	 		 sudo cp ./091-94326/InstallESDDmg.pkg /Applications/Install\ 
macOS\ High\ Sierra.app/Contents/SharedSupport/InstallESD.dmg sudo cp 
./091-94326/AppleDiagnostics.dmg /Applications/Install\ macOS\ High\ 
Sierra.app/Contents/SharedSupport/ sudo cp 
./091-94326/AppleDiagnostics.chunklist /Applications/Install\ macOS\ 
High\ Sierra.app/Contents/SharedSupport/ sudo cp 
./091-94326/BaseSystem.dmg /Applications/Install\ macOS\ High\ 
Sierra.app/Contents/SharedSupport/ sudo cp 
./091-94326/BaseSystem.chunklist /Applications/Install\ macOS\ High\ 
Sierra.app/Contents/SharedSupport/  		 			&nbsp; 		   		 			Verify your 
"Install High Sierra.app" for completeness. You should now have a 
complete macOS High Sierra 10.13.6 (17G65) Installer package in your 
/Applications Folder. 		  	  	 		&nbsp; 	  	 		The entire iMac Pro macOS
 Installer Package Creation Approach detailed above has been verified 
and approved by Motbod and is fully in line with the actual board rules.
 	  	 		&nbsp; 	  	 		Many thanks to @macandrea for his substantial and 
extensive contributions. He even now automatised the entire "Install 
High Sierra.app" creation procedure detailed above within one single 
script:&nbsp; 	  	 		&nbsp; 	  	 		createInstaller.sh&nbsp;will 
automatically create on any MacOS System the "Install High Sierra.app" 
for macOS High Sierra 10.13.6 (17G65) in the /Applications folder. 	  	 
		&nbsp; 	  	 		Just download und 
unzip&nbsp;createInstaller.sh.zip&nbsp;and run the following terminal 
commands: 	  	 		 cd ~/Downloads chmod +x createInstaller.sh 
./createInstaller.sh  		 			&nbsp; 		  	  	 		&nbsp; 	  	 		Absolutely 
brilliant, gorgeous and genius job man! 	  	 		&nbsp; 	  	 		&nbsp; 	  	
 		D.3) iMac Pro macOS High Sierra 10.13.6 (17G65) USB Flash Drive 
Installer Creation&nbsp; 	  	 		&nbsp; 	  	 		Follow the individual 
steps detailed below to successfully create a bootable iMac Pro macOS 
High Sierra macOS High Sierra 10.13.6 (17G65) USB Flash Drive Installer.
 	  	 		&nbsp; 	  	 		1.) Format a USB Flash Drive of your choice 
(source, named USB) with HFS+ [(Mac OS Extended (Journaled)] and a GUID 
partition table by means of Apple's Disk Utility on any other Hackintosh
 or Mac of your choice. This will create an empty HFS+ Partition and a 
yet empty EFI-partition on your iMac Pro macOS USB Flash Drive 
Installer. 	  	 		&nbsp; 	  	 		2.) With the macOS High Sierra 10.13.6 
(17G65) Installer Package in your /Application Folder,&nbsp; connect 
your USB Flash Drive (named USB) and run the following terminal command:
 	  	 		&nbsp; 	  	 		&nbsp; 	  	 sudo /Applications/Install\ macOS\ 
High\ Sierra.app/Contents/Resources/createinstallmedia --volume 
/Volumes/USB --applicationpath /Applications/Install\ macOS\ High\ 
Sierra.app --nointeraction  	 		&nbsp; 	  	 		&nbsp; 	  	 		
Alternatively, one can create the iMac Pro macOS USB Flash Drive 
Installer also by means of the&nbsp;Install Disk Creator.app. 	  	 		
&nbsp; 	  	 		3.) Yet we have to make our iMac Pro macOS USB Flash Drive
 Installer also bootable. This can be partly done by means of the 
following terminal commands: 	  	 		 cd /Volumes/YOUR_USB_VOLUME mkdir 
.IABootFiles cd .IABootFiles cp 
/Volumes/YOUR_USB_VOLUME/System/Library/CoreServices/boot.efi .  		 This
 is a tricky part where many people fail.&nbsp;Note that 
"YOUR_USB_VOLUME" is a place holder in the above commands for the name 
of your real USB Flash Drive. Before executing the above commands, 
replace "YOUR_USB_VOLUME" by the real name of your USB Flash Drive. 	  	
 		&nbsp; 	  	 		To make the entire thing idiot proofed, let me explain 
the entire procedure by means of some nice example once provided by 
@paulotex to some user: 	  	 		&nbsp; 	  	 		If your USB is called 
"Super USB I Like It Very Much" then you have to use: 	  	 		&nbsp; 	  	
 		cd /Volumes/Super\ USB\ I\ Like\ It\ Very\ Much 	  	 		&nbsp; 	  	 		
Note the "\" before each space. 	  	 		&nbsp; 	  	 		The entire 
procedure for the assumed USB Flash Drive with the above name convention
 would look like that (don't forgot the isolated dot "." at the end of 
the last copy (cp) command below): 	  	 		 cd /Volumes/Super\ USB\ I\ 
Like\ It\ Very\ Much mkdir .IABootFiles cd&nbsp; .IABootFiles cp 
/Volumes/Super\ USB\ I\ Like\ It\ Very\ 
Much/System/Library/CoreServices/boot.efi .  		 			&nbsp; 		  	  	 		
With the terminal command: 	  	 		 ls boot.efi  		 			&nbsp; 		  	  	 		
you can subsequently verify that boot.efi is there where it should be. 	
  	 		&nbsp; 	  	 		If you mistake at this point, your USB Flash Drive 
Installer will not be bootable and the USB Flash Drive macOS Installer 
partition will be simply invisible in the Clover Boot Menu! 	  	 		
&nbsp; 	  	 		4.) For successfully booting your iMac Pro macOS USB Flash
 Drive Installer, the latter must however also contain a valid EFI- 
Folder with an SMBIOS iMacPro1,1 system definition. Thus, copy the 
EFI-Folder you prepared in Section D.1) to the yet empty EFI Partition 
of your iMac Pro macOS USB Flash Drive Installer. 	  	 		&nbsp; 	  	 		
You now have a fully functional and bootable iMac Pro macOS High Sierra 
10.13.6 (17G65) USB Flash Drive Installer. 	  	 		&nbsp; 	  	 		Many 
thanks to @macandrea for his substantial and extensive contributions. 	 
 	 		&nbsp; 	  	 		&nbsp; 	  	 		D.4) iMac Pro macOS High Sierra 10.13.6
 (17G65) Clean Install&nbsp;on Skylake-X/X299 	  	 		&nbsp; 	  	 		
Follow the individual steps detailed below to successfully setup macOS 
High Sierra 10.13.6 (17G65)&nbsp; on a virgin system drive of your 
choice (NVMe, SSD or HDD). 	  	 		&nbsp; 	  	 		1.) In order to perform a
 clean install of macOS High Sierra 10.13.6 (17G65), prepare a virgin 
NVMe, SDD or HDD destination drive for the iMac Pro macOS installation 
by formatting the drive with HFS+ [(Mac OS Extended (Journaled)] and a 
GUID partition table by means of Apple's Disk Utility on any other 
Hackintosh or Mac of your choice. This will create an empty HFS+ 
Partition and a yet empty EFI-partition on the drive. 	  	 		&nbsp; 	  	
 		2.) Copy the EFI-Folder you prepared in Section D.1) to the yet empty
 EFI Partition. 	  	 		&nbsp; 	  	 		3.) Now connect the Destination 
Drive to your Hackintosh System and boot the latter with the plugged 
iMac Pro macOS High Sierra 10.13.6 (17G65) USB Flash Drive Installer, 
your created in Section D.2) 	  	 		&nbsp; 	  	 		4.) While booting your
 system, press the F8 button to enter the BIOS boot menu. Select to boot
 from your iMac Pro macOS USB Flash Drive Installer. 	  	 		&nbsp; 	  	 
		5.) Subsequently, click on the USB Flash Drive Installer Icon in the 
clover boot menu to boot the respective macOS Installer partition on 
your iMac Pro macOS USB Flash Drive Installer 	  	 		&nbsp; 	  	 		6.) 
After successful boot, pass the individual steps of the macOS high 
Sierra 10.13 installation menu and finally select the destination drive 
of your macOS High Sierra 10.13 Installation, which should be logically 
the system disk you successfully configured above. In the next step, the
 Installer will create a macOS High Sierra 10.13 Installer Partition on 
the system disk and subsequently reboot your system. 	  	 		&nbsp; 	  	 
		7.) During system reboot, just press again the F8 button to enter the 
BIOS boot menu. Select again to boot from your USB Flash Drive. In 
contrary to 6.), click this time on the "Install MacOS.." Icon in the 
clover boot screen to boot the newly created macOS High Sierra 10.13 
Installer Partition on your system disk. 	  	 		&nbsp; 	  	 		8.) After 
successful boot, you will enter now the macOS High Sierra 10.13 
Installer Screen with a progress bar starting at 34 minutes. 	  	 		
&nbsp; 	  	 		9.) After another reboot, press again the F8 button to 
enter the BIOS boot menu. Select to boot with your System Disk 
EFI-folder. Click on the "MacOS High Sierra" icon in the clover boot 
screen to boot the updated macOS High Sierra 10.13 partition on your 
system disk. 	  	 		&nbsp; 	  	 		10.) After successful boot you will 
enter again the macOS High Sierra 10.13 Installer Screen with a progress
 bar starting at 18 minutes. After successfully registration at iCloud 
at the end of the macOS installation, you now have your first iMac Pro 
macOS High Sierra 10.13.6 (17G65) build. 	  	 		&nbsp; 	  	 		Proceed 
with Section D.6) - iMac Pro macOS High Sierra Build Updates (if 
necessary) or E.) - Post Installation Process. 	  	 		&nbsp; 	  	 		
&nbsp; 	  	 		D.5)&nbsp;Direct iMac Pro conversions of a functional 
Skylake-X/X299 system with a SMBIOS System Definition different from 
iMacPro1,1 and a standard macOS build implementation 	  	 		&nbsp; 	  	 
		1.) Replace the EFI-Folder of your System Disk by the EFI-Folder you 
created in Section D.1) 	  	 		&nbsp; 	  	 		2.) Copy 
/System/Library/CoreServices/PlatformSupport.plist to your Desktop, add 
BoardID "Mac-7BA5B2D9E42DDD94"&nbsp;under SupportedBoardIDs by means of 
Xcode as suggested by user Griven from the German Hackintosh-Forum and 
copy back the modified PlatformSupport.plist to 
System/Library/CoreServices/. 	  	 		&nbsp; 	  	 		3.) If not already in
 your /Applications folder after performing Section D.2), copy the iMac 
Pro macOS Installer Package ("Install High Sierra.app") to your 
/Applications folder. Alternatively to D.2) and the macOS Full Package 
Installer, it is also sufficient to just download the original 
unmodified macOS High Sierra 10.13.6 (17G65) BaseSystem.dmg distribution
 from the Apple Server to your Desktop with the following terminal 
commands: 	  	 		 cd ~/Desktop/ curl 
http://swcdn.apple.com/content/downloads/51/08/091-86775/1fn3s8c48wk0u34dyujciitmn0nx3ul3dc/BaseSystem.dmg
 -o BaseSystem.dmg  		 			&nbsp; 		  	  	 		4.) Double click on the 
"Install High Sierra.app" in the /Applications Folder to start the macOS
 High Sierra 10.13.6 (17G65) installation. Alternatively, double click 
on the BaseSystem.dmg to mount the macOS installer and double click on 
the therein contained&nbsp; "Install macOS High Sierra.app" to start the
 macOS High Sierra 10.13.6 (17G65) installation. 	  	 		&nbsp; 	  	 		
5.) After reboot, click on the "Install MacOS.." Icon in the clover boot
 screen to boot the newly created macOS High&nbsp;Sierra 10.13 Installer
 Partition on your system disk. 	  	 		&nbsp; 	  	 		6.) After 
successful boot, you will enter now the macOS High Sierra 10.13 
Installer Screen with a progress bar starting at 43&nbsp;minutes. 	  	 	
	&nbsp; 	  	 		7.) After another reboot, click on the "MacOS High 
Sierra" icon in the clover boot screen to boot the updated macOS High 
Sierra 10.13 partition on your system disk. 	  	 		&nbsp; 	  	 		8.) 
After successful boot you will enter again the macOS High Sierra 10.13 
Installer Screen with a progress bar starting at 18 minutes. After 
successfully registration at iCloud at the end of the macOS 
installation, you now have your first iMac Pro macOS High Sierra 10.13.6
 (17G65) build. 	  	 		&nbsp; 	  	 		Proceed with Section D.6) - iMac 
Pro macOS High Sierra Build Updates (if necessary) or Section E.) - Post
 Installation Process. 	  	 		&nbsp; 	  	 		&nbsp; 	  	 		D.6)&nbsp;iMac
 Pro macOS High Sierra Update Procedure 	  	 		&nbsp; 	  	 		After the 
successful clean install or conversion to macOS High Sierra 10.13.6 
(17G65),&nbsp;you are be able to update your system to High Sierra 
10.13.6 SU (17G4015) or&nbsp;to macOS Mojave 10.14.2&nbsp;directly via 
the Appstore by following my respective guidelines. 	  	 		&nbsp; 	   	 
		E.) Post Installation Process 	   	 		&nbsp; 	   	 		E.1)&nbsp;HWP 
(Intel SpeedShift Technology) CPU Power Management Configuration 	   	 	
	&nbsp; 	   	 		On Skylake-X/X299 Systems with unlocked mainboard BIOS 
MSR 0xE2 BIOS register and SMBIOS iMacPro1,1 we gain fully native HWP 
(IntelSpeedShift) Power Management after disabling the last remaining 
XCPM KernelToPatch entry "xcpm_core_scope_msrs" in Section "Kernel and 
Kext Patches" of Clover Configurator, which by default is still 
implemented but disabled in the config.plist of my&nbsp;actual 
respective X299 EFI-Folder distribution.  	   	 		&nbsp; 	   	 		Users 
with locked mainboard BIOS MSR 0xE2 register, still have to use the 
"xcpm_core_scope_msrs" XCPM KernelToPatch entry to successfully boot 
their systems. Otherwise the OSX Kernel will write to that BIOS register
 and cause KP at boot!&nbsp; 	   	 		&nbsp; 	  	 		 			HWP is a way for 
the processor itself to manage the power consumption, with minor input 
from OSX on what it thinks it needs. In contrary, XCPM is the OSX power 
management part. It directly controls older hardware like Broadwell-E/EP
 or Haswell-E/EP and enables HWP on newer hardware like Skylake-X. It 
also sets some HWP variables, like the desired frequency at the maximum.
 		  		 			&nbsp; 		  		 			XCPM is enabled by default.&nbsp; 		  		 			
&nbsp; 		  		 			 				XCPM is enabled by default. 			  			 				&nbsp; 		
	  			 				For it's complete configuration, XCPM still requires the CPU 
"plugin-type" injection to properly load the required XCPM frequency 
vectors from the iMacPro.plist, which can be directly achieved within 
the config.plist by checking "PluginType" in Section "ACPI" of Clover 
Configurator. 			 		  		 			&nbsp; 		  		 			 				 			  			 				&nbsp; 	
		  		  		 			 				How to verify a working xcpm configuration? 			  			 
				&nbsp; 			  			 				a.) Typically the command "sysctl 
machdep.xcpm.mode" reveals 1, which means that XCPM is active. 			  			 
				&nbsp; 			  			 				b.) Verify that in the IORegistryExplorer you 
have now under CP00@0 the following entry: 			 		  		 			&nbsp; 		 	  	 
Property:         Type:         Value: plugin-type       Number        
0x1  	 		&nbsp; 	   	 		c.) Also verify with the terminal command: 	   	
 kextstat|grep -y x86plat  	 		&nbsp; 	   	 		that the 
"X86PlatformPlugin.kext"&nbsp;is now loaded. If the command returns 
something like 	   	 112    1 0xffffff7f822bc000 0x17000    0x17000    
com.apple.driver.X86PlatformPlugin (1.0.0) 
FD88AF70-3E2C-3935-99E4-C48669EC274B &lt;111 19 18 13 11 7 6 5 4 3 1&gt;
 146    1 0xffffff7f822d3000 0x7000     0x7000     
com.apple.driver.X86PlatformShim (1.0.0) 
DCEA94A4-3547-3129-A888-E9D5C77B275E &lt;112 111 13 7 4 3&gt;  	 		
&nbsp; 	   	 		d.) Verify with the following terminal command: 	   	 
kextstat|grep -y appleintelcpu  	 		that you got rid of the Apple Intel 
CPU power management. If the result is empty you are fine. 	   	 		
&nbsp; 	   	 		d.)&nbsp; Verify the following terminal command: 	   	 
sysctl -n machdep.xcpm.vectors_loaded_count  	 		&nbsp; 	   	 		If this 
command returns "1", the XCPM FrequencyVectors are properly loaded and 
you are all set. 	   	 		&nbsp; 	   	 		E.2) Graphics Configuration 	   
	 		&nbsp; 	   	 		 			 				&nbsp; 			   			 				Most&nbsp;ATI GPUs, 
e.g. RX Vega 64, RX Vega Frontier, RX 580, RX 560 are supposed to be 
"natively" implemented. It is commonly recommended not to use RX 560 and
 RX 580 GPUs due to the lacking iGPU implementation when using SMBIOS 
iMacPro1,1. 			  			 				&nbsp; 			  			 				By means of my Vega SSDT 
PCI device implementation outlined in Section 9.2.2,&nbsp; all available
 ports on the Gigabyte Vega 64 (3x HDMI, 3x DP), including multi-monitor
 support and display hot plug are automatically and successfully 
implemented. However, it seems that DP-port issues (black screen) 
remain, when employing the respective Vega SSDT PCI device 
implementation on Sapphire Nitro+ Vega 64 (2x HDMI, 2xDP) or ASUS Strix 
Vega 64 (2x HDMI, 2x DP, 1x DVI) GPUs, which only can be removed by 
adding the actual version of&nbsp;Whatevergreen.kext. Within such 
configuration, multi-monitor support and display hot plug can be fully 
achieved also in case of the latter custom Vegas (both 10.13.6 SU and 
10.14.2). A fall-back to the formerly used Kamarang frame buffer SSDT 
implementation of @apfelnico&nbsp;does not provide any valuable solution
 for these kind of custom Vegas. Also note that Whatevergreen.kext only 
seems required for all Vegas possessing less than 6 physical ports 
(including the original Vegas like Frontier and Vega 64), else the 
current Vega SSDT PCI device implementation does pretty well it's job 
including fully successful system sleep/wake.. 			  			 				&nbsp; 			  
			 				Important additional comment for all Vega users with 4K monitors
 though: when connecting a Vega with e.g. the LG 38UC99-W (WUHD, 3840 
pix x 1600 pix) via one of the Display Ports (DPs), the screen 
resolution is fine under both Windows 10 and macOS High Sierra but is 
totally at odd during boot (VGA like boot screen resolution). The VEGA 
DP 4K boot screen resolution issue is neither related with the fact that
 the LG 38UC99-W is an ultra-wide (3840x1600) and not a true UHD 
(3840x2160) monitor nor related to any likely apparent issue with the 
ASUS Prime X299 Deluxe firmware. It is definitely a Vega firmware 
problem in combination with most 4K displays, as the DP 4K boot screen 
resolution issue is totally absent with my Nvidia GPU and the problem 
also does not only affect the ASUS Splash Screen but also spreads over 
the entire boot process until the login screen is reached (Windows and 
macOS). Splash Screen, Apple logo or verbose boot messages are not 
stretched but rather have VGA like resolution. Any fix of the AMD vBIOS 
would be highly appreciated. It is more than disappointing to witness 
such issues with 600-1000$ GPUs... Fortunately, the 4K boot screen issue
 is restricted to the Vega DP ports and likely due to the fact that the 
LG 38UC99-W only supports DP 1.2. Solution: Connect your Vega and your 
4K display via the HDMI port. The 30 Hz HDMI monitor frequency issue 
under 10.13 is successfully removed under Mojave: monitor frequency of 
60 Hz with the display connected via HDMI (in contrary to 75 Hz via DP).
 			  			 				&nbsp; 			   			 				Also&nbsp;Nvidia Kepler Graphics 
Cards&nbsp;are natively implemented.&nbsp; 			  			 				&nbsp; 			  			 
				All Users with&nbsp;Maxwell and Pascal Nvidia Graphics Cards&nbsp;on
 SMBIOS iMacPro1,1 can employ officially distributed Nvidia 10.13 Web 
Drivers for their Nvidia Pascal and Maxwell graphics cards! Upon my 
request from 7 January 2018, Nvidia officially released first 
WebDriver-387.10.10.10.25.105 for 10.13.2 (17C2120) and first 
WebDriver-387.10.10.10.25.106 for 10.13.2 SA (17C2205) - Supplemental 
Update on 11 January 2018. On 25 January 2018, Nvidia released a Web 
Driver 387.10.10.10.25.157 for 10.13.3 (17D2047), which worked flawless 
with Pascal GPUs (lagging issues have been reported for Maxwell GPUs). 
On 20 February 2018, Nvidia released a Web Diver 387.10.10.10.30.159 for
 10.13.3 SA (17D2102). On 31 March 2018 and 18 April 2018, Nvidia also 
released Web Driver 387.10.10.10.30.103 and 387.10.10.10.30.106 for 
10.13.4 (17E199). On 25 April 2018,&nbsp; Web Driver 387.10.10.10.30.107
 has been released for 10.13.4 SU (17E202). On 11 July 2018, Nvidia 
released 10.13.6 
(17G65)&nbsp;WebDriver-387.10.10.10.40.105.&nbsp;Since&nbsp;2 November 
2018, there is&nbsp;finally also a&nbsp;web driver for 10.13.6 SU 
(17G3025) and (17G4015) 			 		  		 			 				Nvidia Black&nbsp;Screen 
Prevention:Apparently with SMBIOS iMacPro1,1, the Nvidia Black Screen 
Prevention has become obsolete. Thanks to @fabiosun from InsanelyMac for
 this finding. Thus, NvidiaGraphicsFixup.kext, subverting 
AppleMobileFileIntegrity banning the driver can 
be&nbsp;theoretically&nbsp;removed from the /EFI/CLOVER/kexts/Other/ 
directory of your macOS Flash Drive Installer and 10.13 System Disk. 
However, the actual releases 
of&nbsp;Whatevergreen.kext&nbsp;and&nbsp;Lilu.kext&nbsp;apparently help 
in fixing the Nvidia HDAU implementation and sporadic black screen 
issues while wake from sleep. Thus, the latter kext combination might 
still represent potential workarounds for few likely remaining system 
issues.&nbsp; 			 		 	  	 		&nbsp; 	  	 		&nbsp; 	  	 		E.3) Audio 
Configuration:&nbsp;&nbsp; 	  	 		&nbsp; 	  	 		 			Note that 
my&nbsp;actual respective X299 EFI-Folder 
distribution&nbsp;does&nbsp;not contain any default audio configuration.
 You have to implement the audio approach of your choice during the Post
 Installation process! Please select between one out of three possible 
audio implementations detailed below.&nbsp;To avoid the loss of 
analogue&nbsp;onboard audio (S1220A in case of the ASUS Prime X299 
Deluxe) on Wake from Sleep,&nbsp;please&nbsp;download, unzip and copy 
the latest CodecCommander.kext&nbsp;distribution of @Rehabman from 
gitbucket.org to the /EFI/Clover/kexts/Other directory in the EFI-Folder
 of your System 
Disk:&nbsp;https://bitbucket.org/RehabMan/os-x-eapd-codec-commander/downloads/.
 		  		 			&nbsp; 		  		 			E.3.1.) AppleALC Audio Implementation 		  		
 			&nbsp; 		  		 			The actual AppleALC audio implementation traces 
back to the extensive efforts and brilliant work @vit9696&nbsp; and 
@apfelnico. This new AppleALC audio approach bases on the actual version
 of&nbsp;AppleALC.kext, which further requires the actual version 
of&nbsp;Lilu.kext&nbsp;in the /EFI/CLOVER/kexts/Other/ directory of your
 System Disk. 		  		 			&nbsp; 		  		 			Provided that you use 
my&nbsp;actual respective X299 EFI-Folder distribution, you need to open
 the config.plist in the /EFI/CLOVER/ directory of your System Disk with
 the Clover Configurator and add the CAVS -&gt; HDEF DSDT replacement 
patch in Clover Configurator Section "ACPI" under "DSDT Patches". 		  		
 			&nbsp; 		 	  	 Comment:          Find*[Hex]     Replace [Hex] CAVS 
-&gt; HDEF      43415653       48444546  	 		&nbsp; 	  	 		When 
implementing the SSDT in Section 9.2), we will perform the &nbsp;CAVS 
-&gt; HDEF ACPI replacement directly within the SSDT. We then have to 
remove again the&nbsp;CAVS -&gt; HDEF ACPI replacement from the 
config.plist! 	  	 		&nbsp; 	  	 		Note that opposite to the alternative
 VoodooHDA and CLoverALC approach detailed below, the AppleALC audio 
implementation requires an Audio ID in injection of "7" instead of "1". 
Implement the latter Audio ID in the config.plist of your System Disk 
under "Audio" and "Injection" in the Section "Devices" of the Clover 
Configurator. 	  	 		&nbsp; 	  	 		The correct HDAU HDMI/DP digital 
Audio PCI device&nbsp;implementation&nbsp;will be detailed&nbsp;in 
Section E.9) in line with the HDEF&nbsp;and&nbsp;GPU PCI device 
implementation. 	  	 		&nbsp; 	  	 		To remove the AppleALC Audio 
Approach Implementation perform the following steps: 	  	 		&nbsp; 	  	 
		1.) Remove&nbsp;AppleALC.kext&nbsp; from the /EFI/CLOVER/kexts/Other/ 
directory of your System Disk. 	  	 		&nbsp; 	  	 		2.) Disable in the 
config. plist the CAVS -&gt; HDEF DSDT Replacement Patch in Clover 
Configurator Section "ACPI" under "DSDT Patches". 	  	 		&nbsp; 	  	 		
3.) Adopt the Audio ID Injection in your respective config.plist in 
Clover Configurator Section "Devices" for the alternative audio approach
 you intent to use. 	  	 		&nbsp; 	  	 		4.) Reboot 	  	 		&nbsp; 	   	 
		E.3.2) VoodooHDA Audio Implementation&nbsp;&nbsp; 	   	 		&nbsp; 	   	
 		1.) Provided that you use my&nbsp;actual respective X299 EFI-Folder 
distribution, you need to open the config.plist in the /EFI/CLOVER/ 
directory of your System Disk with the Clover Configurator and add the 
CAVS -&gt; HDEF DSDT Replacement Patch in Clover Configurator Section 
"ACPI" under "DSDT Patches". 	   	  Comment                         
Find*[HEX]      Replace*[HEX] Rename CAVS to HDEF      43415653        
48444546   	 		&nbsp; 	   	 		When implementing the SSDT in Section 
9.2), we will perform the &nbsp;CAVS -&gt; HDEF ACPI replacement 
directly within the SSDT. We then have to remove again the&nbsp;CAVS 
-&gt; HDEF ACPI replacement from the config.plist! 	   	 		&nbsp; 	   	 
		2.) Download, unzip&nbsp;and copy the&nbsp;VoodooHDA.kext 
v2.9.0d10&nbsp;to your Desktop. Mouse Right-Click on VoodooHDA.kext 
-&gt; select "Show Package Contents" -&gt; click on "Contents" -&gt; 
Right-Click on "Info.plist" -&gt; "Open With" -&gt; "Other" -&gt; select
 "TextEdit.app"&nbsp;&nbsp; 	   	 		&nbsp; 	   	 		3.) a.) In the 
TextEdit.app select in the menu "Edit" -&gt; "Find" -&gt; "Find..." 
-&gt; search for&nbsp; "IOPCIClassMatch" and&nbsp;replace 	   	 
&lt;key&gt;IOPCIClassMatch&lt;/key&gt; 
&lt;string&gt;0x04020000&amp;0xfffe0000&lt;/string&gt;  	 		with 	   	 
&lt;key&gt;IOPCIPrimaryMatch&lt;/key&gt; 
&lt;string&gt;0x43831002&lt;/string&gt;  	 		&nbsp; 	  	 		b.) Download,
 unzip and run the&nbsp;&nbsp;attached at the end of this originating 
post/guide. 	  	 		&nbsp; 	  	 		Search for HDEF and write down the 
"IOName"-entry under e.g. PC00@0/AppleACPIPCI/HDEF@1F,3 which can 
slightly deviate on mainboards different from the ASUS Prime X299 
Deluxe. 	  	 		&nbsp; 	  	 		&nbsp;&nbsp; 	   	 		&nbsp; 	   	 		The 
HDEF-IOName on the ASUS Prime X299 Deluxe is "pci8086,a2f0" 	  	 		
&nbsp; 	  	 		Concert the IOName as shown below in case of the 
HDEF-IOName of the ASUS Prime X299 Deluxe: 	  	 		&nbsp; 	  	 		
"0xa2f08086" 	  	 		&nbsp; 	  	 		c.) Now replace in the "Info.plist" of
 "VoodooHDA.kext" 	  	 		&nbsp; 	  	 		"0x43831002" 	  	 		&nbsp; 	  	 	
	by 	  	 		&nbsp; 	  	 		"0xa2f08086" 	  	 		&nbsp; 	  	 		and save the 
"Info.plist". 	  	 		&nbsp; 	  	 		d.) Copy the modified 
"VoodooHDA.kext" to the /EFI/Clover/kexts/Other/ - directory of your 
System Disk. 	  	 		&nbsp; 	  	 		4.) Download, unzip and copy 
the&nbsp;VoodooHDA.prefPane v1.2&nbsp;attached below to 
~/Library/PreferencePanes/ 	  	 		&nbsp; 	  	 		5.) Note that the 
VoodooHDA audio approach requires an Audio ID in injection of "1". The 
corresponding modification of the config.plist has to be implemented by 
means of the Clover Configurator by modifying the respective entry in 
Section "Devices". 	  	 		&nbsp; 	  	 		6.) Reboot 	  	 		&nbsp; 	  	 		
To remove the VoodooHDA audio implementation, perform the following 
steps: 	  	 		&nbsp; 	  	 		1.)&nbsp; Disable in the config. plist the 
CAVS -&gt; HDEF DSDT Replacement Patch in Clover Configurator Section 
"ACPI" under "DSDT 	  	 		Patches". 	  	 		&nbsp; 	  	 		2.) Remove 
VoodooHDA.kext&nbsp; from the /EFI/CLOVER/kexts/Other/ directory of your
 System Disk. 	  	 		&nbsp; 	  	 		3.) 
Remove&nbsp;VoodooHDA.prefPane&nbsp;from ~/Library/PreferencePanes/ 	  	
 		&nbsp; 	  	 		4.) Adopt the Audio ID Injection in your config.plist 
in Section "Devices" of the Clover Configurator for the alternative 
audio&nbsp;approach you intent to use 	  	 		&nbsp; 	  	 		5.) Reboot 	 
 	 		&nbsp; 	  	 		E.3.3) cloverALC Audio Implementation&nbsp;&nbsp; 	  
 	 		@Toldea's cloverALC audio approach has been implemented thanks to 
the respective advices and help of user @Ramalama.&nbsp;Note that in 
contrary to the AppleALC and VoodooHDA approaches, the cloverALC audio 
approach detailed below will patch the native vanilla AppleHDA.kext in 
the /S/L/E directory of your System Disk! This before implementing the 
cloverALC audio approach, backup your native vanilla AppleHDA.kext from 
the /S/L/E directory on your System Disk! You will have to reinstall the
 native vanilla AppleHDA.kext from the /S/L/E directory on your System 
Disk with the appropriate permissions during a removal of the cloverALC 
Audio Implementation! Thus you need a backup of the latter native 
vanilla kext in any case!&nbsp;&nbsp;&nbsp; 	  	 		&nbsp; 	  	 		
CloverALC audio approach installation: 	  	 		&nbsp; 	  	 		1.) Provided
 that you use my&nbsp;actual respective X299 EFI-Folder distribution, 
you need to open the config.plist in the /EFI/CLOVER/ directory of your 
System Disk with the Clover Configurator and add the CAVS -&gt; HDEF 
DSDT Replacement Patch in Clover Configurator Section "ACPI" under "DSDT
 Patches". 	  	 		&nbsp; 	  	 Comment                  Find*[Hex]    
Replace[Hex] Rename CAVS to HDEF      43415653      48444546  	 		When 
implementing the SSDT in Section 9.2), we will perform the &nbsp;CAVS 
-&gt; HDEF ACPI replacement directly within the SSDT. We then have to 
remove again the&nbsp;CAVS -&gt; HDEF ACPI replacement from the 
config.plist! 	   	 		&nbsp; 	   	 		2.) Change the Audio ID Injection 
in the config.plist on your System Disk in Section "Devices" under 
"Audio" and "Inject" to "1".&nbsp;&nbsp;3.) Add the following cloverALC 
related KextToPatch entries to your config.plist on your System Disk in 
section "Kerneland Kext Patches" of Clover Configurator in the 
"KextsToPatch" listing: 	   	 Name*         Find*[Hex]         Replace* 
[Hex]    Comment AppleHDA      8a19d411           00000000          
t1-10.12-AppleHDA/Realtek ALC... AppleHDA      8b19d411           
2012ec10          t1-10.12-AppleHDA/RealtekALC1220 AppleHDA      
786d6c2e 7a6c      7a6d6c2e 7a6c     t1-AppleHDA/Resources/xml&gt;zml  	
 		&nbsp; 	  	 		3.) Download, unzip and copy the&nbsp;realtekALC.kext 
v2.8&nbsp; to the /EFI/CLOVER/kexts/Other/ directory on your System Disk
 	  	 		&nbsp; 	  	 		4.) Download and 
execute&nbsp;audio_cloverALC-130.sh, which will patch the native vanilla
 AppleHDA.kext in the /S/L/Edirectory of your System Disk 	  	 		&nbsp; 
	  	 		5.) Reboot 	  	 		&nbsp; 	  	 		&nbsp; 	  	 		To remove the 
cloverALC audio implementation, perform the following steps: 	  	 		
&nbsp; 	  	 		1.) Remove realtekALC.kext from the 
/EFI/CLOVER/kexts/Other/ directory on your System Disk 	  	 		&nbsp; 	  
	 		2.) Remove all cloverALC related KextToPatch entries from the 
config.plist on your System Disk&nbsp; in the "Kernel andKext Patches" 
section of Clover Configurator. 	  	 		&nbsp; 	  	 		3.)&nbsp;Disable in
 the config. plist the CAVS -&gt; HDEF DSDT Replacement Patch in Clover 
Configurator Section "ACPI" under"DSDT Patches". 	  	 		&nbsp; 	  	 		
4.) Delete the patched AppleHDA.kext in the /S/L/E/ Directory on your 
System Disk 	  	 		&nbsp; 	  	 		5.) Reinstall the original vanilla 
AppleHDA.kext with the appropriate permission in the /S/L/E/ directory 
on yourSystem Disk using&nbsp;Kext Utility 	  	 		&nbsp; 	  	 		6.) 
Adopt the Audio ID Injection in your config.plist in Section "Devices" 
of the Clover Configurator for the alternative audioapproach you intent 
to use 	  	 		&nbsp; 	  	 		7.) Reboot 	  	 		&nbsp; 	  	 		&nbsp; 	  	 
		E.4) USB Configuration&nbsp; 	   	 		&nbsp; 	   	 		Since 10.13 SU and
 with AppleIntelPCHPMC, Apple implements IOPCIPrimaryMatchID "a2af8068" 
and AppleUSBXHCISPT also for the ASUS Prime X299 Deluxe. Until 10.14.0, 
by this all external and internal XHC USB 3.0 (USB 3.1 Gen 1 Type-A) and
 USB 2.0 (USB 2.0 Gen 1 Type-A) connectors of all X299 mainboards where 
fully implemented, always provided that one uses working USB port limit 
patches. 	  	 		&nbsp; 	   	 Name*          Find*[Hex]               
Replace* [Hex]           Comment AppleUSBXHCI   837D880F 0F83A704 0000  
 837D880F 90909090 9090   10.13.6 USB Port Limit Patch  	 		&nbsp; 	   	
 		However, it is strongly recommended to use board-specific XHC USB 
kexts in addition. Such board-specific XHC USB kexts can be easily 
created for any motherboard of any brand by following my 
respective&nbsp;XHC USB Kext Creation guideline. Being mainboard 
specific, a XHC USB kext is only valid for one particular mainboard 
model although users of the same mainboard model naturally can share the
 same XHC USB kext, if complete and properly implemented without any 
additional efforts. 	   	 		&nbsp; 	   	 		
KGP-iMacPro-ASUS-PX299D-XHCI.kext&nbsp;would be the XHC USB kext for the
 Prime X299 Deluxe with all 20 ports implemented.&nbsp; 	   	 		&nbsp; 	
   	 		However, it is strongly recommend to keep respective USB port 
limit patches disabled and to use a truncated 15-port kext instead, 
which might avoid buffer overruns and makes your system more vanilla 
with respect to future macOS updates.For the truncated 15-port kext, we 
have to drop some of the 20 HS and SS ports implemented from the kext to
 stay within Apple's 15 USB port limit. For truncating a fully 
implemented XHC USB kext (all 20 HS and SS ports implemented), I usually
 recommend to drop one out of usually two internal USB3.0 connectors 
(which already reduces the number of implemented ports to 16 for the 
ASUS Prime X299 Deluxe): 	   	 		&nbsp; 	   	 		   	 		&nbsp; 	   	 		To
 remain within the 15 USB port limit, I also recommend to drop one of 
the four USB2.0 ports at the backside of the mainboard from the kext 
(HS09, HS10, HS11 or HS12), which further reduces﻿&nbsp;the number of 
implemented USB ports by one.﻿﻿ 	   	 		&nbsp; 	   	 		 	   	 		&nbsp; 	
   	 		Thus﻿, in total﻿&nbsp;we have now 15 implemented HS and SS ports 
and we just stay within the 15 USB port limit. In the 
truncated&nbsp;&nbsp;KGP-iMacPro-ASUS-PX299D-XHCI-15port.kext, I removed
 HS03, HS04, SSP3, SSP4&nbsp;(assigned to the internal USB3.0 header 
U31G1_34) and HS12&nbsp;(assigned to the most left USB2.0 connector on 
the back panel of the mainboard) from the kext. By this, all other 
USB2.0 and USB3.0 ASUS Prime X299 Deluxe onboard connectors remain fully
 functional. Alternatively, one could also drop e.g. HS01, HS01, SSP1, 
SSP2&nbsp;(assigned to the internal USB3.0 header U31G1_12) or either 
HS09, HS10&nbsp;or 
HS11&nbsp;from&nbsp;KGP-iMacPro-ASUS-PX299D-XHCI.kext. Up to your 
personal taste. 	  	 		&nbsp; 	  	 		All experienced users are kindly 
invited to provide their fully implemented XHC USB kext and truncated 
15-port XHC USB kext for a motherboard not yet being part of the 
respective&nbsp;XHC USB Kext Library&nbsp;with an implemented 
port-layout.rtf and by else following the correct kext nomenclatures 
defined in my XHC USB Kext creation guidelines in line with full 
motherboard and SMBIOS denominations. 	  	 		&nbsp; 	  	 		Remaining USB
 ejection issues during sleep/wake likely can be fixed by 3rd party 
software tools like e.g.&nbsp;mountain.app. 	  	 		&nbsp; 	   	 		&nbsp;
 	   	 		USB 2.0 and USB 3.0 Benchmark Results&nbsp;&nbsp; 	   	 		
&nbsp; 	   	 		&nbsp;&nbsp;&nbsp;&nbsp; 	   	 		&nbsp; 	   	 		USB 3.1 
Type-A and Type-C Benchmark Results&nbsp;&nbsp; 	   	 		&nbsp; 	   	 		
&nbsp;&nbsp;&nbsp;&nbsp; 	   	 		&nbsp; 	   	 		E.5) GC-Titan Ridge / 
GC-Alpine Ridge or ASUS TBEX 3&nbsp;Add-in PCIe Adapter Implementation 	
   	 		&nbsp; 	   	 		For the successful implementation of the GC-Titan 
Ridge (recommended), GC-Alpine Ridge (compatible) or ASUS Thunderbolt 
EX3 (R.I.P) PCIe Add-In Adapters, a fully working Dual Boot System with 
an UEFI Windows Implementation is unfortunately absolutely mandatory. 
You will not be able to configure your Thunderbolt 3 Adapter in the 
mainboard BIOS, until the Adapter has been successfully recognised and 
initialised by the UEFI Windows System. Fortunately legal and official 
License Keys for the actual Windows 10 Pro distribution can be purchased
 with a little bit of temporal effort on Google for an actual price of 
20 $ or even below! Thus, the installation of a dual boot system with 
Windows will require some additional temporal user effort but will not 
noticeably further affect the users's budget. 	  	 		&nbsp; 	  	 		
Please note that I especially emphasize the term UEFI, when speaking 
about the parallel Windows implementation. Don't use or perform a Legacy
 Implementation of Windows! In order to properly implement your Windows 
partition later-on in the Clover Bootloader and to comply with the 
actual Mainbaord-BIOS settings requirements,&nbsp;it is absolutely 
mandatory to run or perform an UEFI Windows implementation! 	  	 		
&nbsp; 	  	 		So if not already implemented, how to achieve a fully 
working UEFI Windows Implementation and Dual boot System with Windows? 	
  	 		&nbsp; 	  	 		1.)&nbsp;Important Note!&nbsp;For the implementation
 of the UEFI Windows Distribution disconnect all usually plugged 
macOSDrives from your rig! The Windows installer will implement a 
Windows Boot Loader! If you have any macOS Drive connected during 
installation, the latter Windows Boot Loader might overwrite and destroy
 your current Clover Boot Loader. This is the last thing you want! Thus 
for the windows installation just connect the destination drive for the 
installation and the Windows USB Flash Drive Installer your will create 
in the subsequent step below! 	  	 		&nbsp; 	  	 		2.)&nbsp;This 
Tutorial&nbsp;explains in all necessary detail how to download an actual
 Windows 10 Creator distribution,&nbsp; and how tosubsequently create a 
bootable USB Flash Drive Installer for a subsequent UEFI Windows 10 
installation by means RUFUS! Don't put emphasis on alternative optional 
methods and always take care that you just follow the instructions for a
 successful subsequent UEFI Windows Installation! 	  	 		&nbsp; 	  	 		
&nbsp;&nbsp; 	   	 		&nbsp; 	   	 		3.)&nbsp;This Tutorial&nbsp;explains
 in all necessary detail how to properly perform the actual Windows 10 
Pro Creator UEFIInstallation,&nbsp;subsequent to the a bootable Windows 
USB Flash Drive Installer realisation detailed in 2.) above.&nbsp; 	   	
 		&nbsp; 	   	 		&nbsp;&nbsp; 	   	 		&nbsp; 	   	 		4.)&nbsp;This 
Tutorial&nbsp;explains in all necessary detail, how to 
migrate/clone/backup your Windows 10 UEFI System Disk afterinstallation 
for future maintenance and safety. 	   	 		&nbsp; 	   	 		&nbsp; 	   	 	
	&nbsp; 	   	 		5.) After successfully performing the UEFI Windows 10 
Pro Creator Implementation, you can reconnect your macOS driveto your 
rig. The newly created UEFI Windows 10 Pro Creator Partition will 
automatically appear as a further boot option in both BIOS Boot Option 
Menu (F8) and Clover Boot Menu! No additional or further actions or 
measurements have to be taken! 	   	 		&nbsp; 	   	 		&nbsp;&nbsp; 	   	
 		&nbsp; 	   	 		6.) Once your Windows 10 Pro Creator Partition is 
fully operational, install all drivers and programs implemented on 
theASUS&nbsp;Prime X299 Series DVD attached to your mainboard. This will
 further allow you to properly adjust the desired AURA Mainboard 
Settings and offer many other&nbsp; mainboard configuration options. 	  
 	 		&nbsp; 	   	 		&nbsp;&nbsp; 	   	 		&nbsp; 	   	 		7.) Now switch 
off your rig and start with the installation of our Thunderbolt 3 Add-In
 PCIe Adapter 		 			&nbsp; 		  		 			I recommend to install the 
Thunderbolt 3 Add-In PCIe Adapter in the 4th PCIe Slot from top, which 
is PCIEX_3 		 	  	 		&nbsp; 	   	 		 	   	 		&nbsp; 	   	 		&nbsp; 	  	 
		8.) Reboot into windows and install the ASUS ThunderboltEX 3 DVD 
accompanying your ASUS Prime X299 Deluxe mainboard. 	  	 		&nbsp; 	   	 
		Reboot into windows and install accompanying TB3 PCIe Drivers and 
Software. 	   	 		&nbsp; 	   	 		9.) Reboot and enter the Mainboard BIOS
 (F2) 	  	 		&nbsp; 	  	 		a.) Go to /Advanced/ Thunderbolt(TM) 
Configuration/ and apply the following BIOS Settings detailed below: 	  
	 TBT Root por Selector                               PCIE16_3 
Thunderbolt USB Support                             Enabled Thunderbolt 
Boot Support                            Enabled Wake From Thunderbolt(TM
 Devices)                   Off Thunderbolt(TM) PCIe Cache-line Size    
            128 GPIO3 Force Pwr                                     On 
Wait time in ms after applying Force Pwr            200 Skip PCI 
OptionRom                                  Enabled Security Level       
                               SL0-No Security Reserve mem per phy slot 
                           32 Reserve P mem per phy slot                
          32 Reserve IO per phy slot                             20 
Delay before SX Exit                                300 GPIO Filter     
                                    Enabled Enable CLK REQ              
                        Disabled Enable ASPM                            
             Enabled Enable LTR                                         
 Disabled Extra Bus Reserved                                  65 
Reserved Memory                                     386 Memory Alignment
                                    26 Reserved PMemory                 
                   960 PMemory Alignment                                
   28 Reserved I/O                                        0 Alpine Ridge
 XHCI WA                                Enabled  	 		&nbsp; 	   	 		10.)
 Shut down your rig, connect the Thunderbolt Device to your Thunderbolt 3
 Adaptor and boot your system.&nbsp; &nbsp;&nbsp; 	  	 		&nbsp; 	  	 		
11.) You are done!&nbsp; Your Thunderbolt 3 Adapter and the connected 
device should now be fully implemented and functional. 	  	 		&nbsp; 	  
	 		12.) We will add TB XHC USB and TB HotPlug functionality in Section 
E.9.2) of this guide. Note that with the GC-Titan Ridge, HotPlug 
functionality can be gained with the THB_C connected. For HotPlug with 
the other TB adaptors, the THB-C must be removed from most of the 
available mainboards. 	  	 		&nbsp; 	  	 		&nbsp; 	  	 		Thunderbolt 
Benchmarks:&nbsp; 	  	 		&nbsp; 	  	 		For the sake fo completeness and 
for testing the overall Thunderbolt Functionality and Performance, I 
benchmarked the the data rates of an external Thunderbolt Drive 
connected via Apple's Thunderbolt-3 to Thunderbolt-2 Adapter. As 
External Thunderbolt Drive, I once more used the Lacie Rugged 
Thunderbolt / USB Type-A and Type-C HDD.&nbsp;&nbsp; 	  	 		&nbsp; 	  	 
		&nbsp;&nbsp;&nbsp; 	  	 		&nbsp; 	  	 		&nbsp; 	  	 		E.6) 
NVMe&nbsp;compatibility&nbsp; 	  	 		&nbsp; 	  	 		In contrary to macOS 
Sierra 10.12, in macOS High Sierra 10.13 there is native support of 
non-4Kn NVMe SSDs, like my Samsung EVO 960 M.2 NVME. All patches applied
 under macOS Sierra 10.12 are therefore obsolete. The native support of 
non-4Kn NVMe SSDs enables the unique opportunity to directly perform a 
clean-install of macOS High Sierra 10.13 on M.2 NVMEs like the Samsung 
EVO 960. 	  	 		&nbsp; 	  	 		&nbsp; 	  	 		E.7.) SSD/NVMe TRIM 
Support&nbsp; 	  	 		&nbsp; 	 	Macs only enable TRIM for Apple-provided 
solid-state drives they come with. If you upgrade a Mac with an 
aftermarket SSD/NVMe, the Mac won’t use TRIM with it. The same applies 
for SSDs/NVMes used by a Hackintosh. When an operating system uses TRIM 
with a solid-state drive, it sends a signal to the SSD/NVMe every time 
you delete a file. The SSD/NVMe knows that the file is deleted and it 
can erase the file’s data from its flash storage. With flash memory, 
it’s faster to write to empty memory — to write to full memory, the 
memory must first be erased and then written to. This causes your 
SSD/NVMe to slow down over time unless TRIM is enabled. TRIM ensures the
 physical NAND memory locations containing deleted files are erased 
before you need to write to them. The SSD/NVMe can then manage its 
available storage more intelligently..&nbsp;  	 		&nbsp; 	  	 		Note 
that the config.plist of my actual respective X299 EFI-Folder 
distribution&nbsp;contains an SSD/NVMe "TRIM Enabler" KextsToPatch 
entry, which can be found in the " Kernel and Kext Patches" Section of 
the Clover Configurator. 	  	 		&nbsp; 	  	 Name*                   
Find*[HEX]                  Replace*[HEX]               Comment         
  MatchOS IOAHCIBlockStorage      4150504c 45205353 4400      00000000 
00000000 0000      Trim Enabler      10.12.x,10.13.x  	 		&nbsp; 	   	 	
	With this KextToPatch entry, SSD/NVMe TRIM should be&nbsp; fully 
enabled on your 10.13 System, see Apple's System Report below. 	   	 		
&nbsp; 	   	 		&nbsp;&nbsp; 	   	 		&nbsp; 	   	 		For the sake of 
completeness please find below the Benchmark of connected NVMe and SDD 
Drives. 	   	 		&nbsp; 	   	 		&nbsp;&nbsp;&nbsp;&nbsp; 	   	 		&nbsp; 	
   	 		E.8) Gbit and 10-Gbit Ethernet Implementations 	   	 		&nbsp; 	  
 	 		Section E.8.1) and and E.8.2.) below, describe in the necessary 
detail how to gain full Gbit and 10-Gbit LAN functionality on 
Skylake-X/X299 systems. 	   	 		&nbsp; 	   	 		E.8.1) ASUS Prime X299 
Deluxe on-board Gbit Ethernet Functionality 	   	 		&nbsp; 	   	 		
Thanks to the&nbsp;SmallTree-Intel-211-AT-PCIe-GBE.kext, also the Intel 
I211_AT Gigabit on-board LAN controller of the ASUS Prime X299 Deluxe 
will be correctly implemented and fully functional, in addition to the 
Intel I219-V Gigabyte on-board LAN controller of the ASUS Prime X299 
Deluxe implemented by means of IntelMausiEthernet.kext (already part of 
my EFI-Folder distributions). Thus, both ethernet ports on the ASUS 
Prime X299 Deluxe should now be fully operational. 	   	 		&nbsp; 	   	 
		Just download , unzip&nbsp; and copy 
the&nbsp;SmallTree-Intel-211-AT-PCIe-GBE.kext&nbsp;to the 
/EFI/Clover/kexts/Other/, reboot and you should be done 	   	 		&nbsp; 	
   	 		E.8.2) 10-GBit Lan Implementations&nbsp;ASUS Prime X299 Deluxe 
on-board Gbit Ethernet Functionality 	   	 		&nbsp; 	   	 		
E.8.2.1)&nbsp;ASUS XG-C100C&nbsp;Aquantia AQC107 10-Gbit NIC 	  	 		
&nbsp; 	  	 		Starting with 10.13.2 there is native support for the 
Aquantia AQTION AQC107 10-GBit NIC of the iMac Pro in form of vanilla 
kext "AppleEthernetAquantiaAqtion.kext", which is further part of 
"IONetworkingFamily.kext/Contents/PlugIns/" placed in 
/System/Library/Extensions/ (credits to @mikeboss). First success with 
the&nbsp;ASUS XG-C100C&nbsp;Aquantia AQTION AQC107 10-GBit PCIe 
x4&nbsp;NIC&nbsp;under MacOS 10.13.3 has been reported by @d5aqoep. 
@Mieze finally came up with a AppleEthernetAquantiaAqtion KextPatch for 
the use of the ASUS XG-C100C Aquantia AQTION AQC107 10-GBit PCIe 
x4&nbsp;NIC&nbsp;also under 10.13.4 and and later macOS versions. 	  	 	
	&nbsp; 	  	 		 			How to successfully implement the&nbsp;ASUS 
XG-C100C&nbsp;Aquantia AQTION AQC107 10-GBit &nbsp;PCIe x4 NIC: 		  		 	
		&nbsp; 		  		 			1.) A temporal macOS High Sierra 10.13.3 (17D2047 in 
case of the iMac Pro) installation is absolutely mandatory at first 
place. Only within the latter macOS High Sierra build, the ASUS XG-C100C
 Aquantia AQTION AQC107 10GBit PCIe x4 NIC&nbsp;will receive the proper 
AQC107 Apple firmware to be recognised and fully implemented by OSX. The
 firmware update will be performed during system boot. Several boot 
intents might be necessary until the firmware update finally succeeds. 
Only subsequently, the ASUS XG-C100C Aquantia AQTION AQC107 10GBit PCIe 
x4 NIC&nbsp;will be natively implemented in macOS High Sierra 10.13.3 
and fully functional. 		  		 			&nbsp; 		  		 			2.) To finally use the 
ASUS XG-C100C Aquantia AQTION AQC107 10GBit PCIe x4 NIC&nbsp;with macOS 
builds &gt;10.13.4 and finally also with&nbsp;10.14, one has to 
implement the following AppleEthernetAquantiaAqtion KextPatch provided 
by @Mieze: 		 	  	 		&nbsp; 	  	 		 Name*&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
Find*[HEX]&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;     Replace*[HEX]&nbsp; 
&nbsp; &nbsp;     Comment AppleEthernetAquantiaAqtion      6275696C 
742D696E      62626262 62626262      Aquantia built-in patch ©Mieze  		 
			&nbsp; 		  	  	 		3.) The proper XGBE ASUS XG-C100C PCI SSDT 
implementation is detailed in Section E.9.2) 	  	 		&nbsp; 	  	 		4.) 
Note that after the firmware update under macOS High Sierra 10.13.3, the
 ASUS XG-C100C AQTION AQC107 10GBit PCIe x4 NIC&nbsp;will refuse the 
official Windows Lan drivers provided by ASUS and will only work with 
Apple's customised&nbsp;Aquantia64v2.0.015.0&nbsp;boot camp drivers 
attached below. 	  	 		&nbsp; 	  	 		Preferable AQC107 10-Gbit NIC PCIe 
solutions now available on&nbsp;the market are the&nbsp;Syba 1 Port PCIe
 x4 10GB &nbsp;Aquantia AQTION AQC107 NIC&nbsp;(thanks to @mirwaiz for 
his respective discovery and for all subsequent confirmation of his 
findings by @mm2margaret&nbsp;, who also pointed me to this extremely 
valid approach) and the&nbsp;1 Port PCIe x4 10GB Aquantia AQtion AQC107 
10G Gaming NIC&nbsp;(thanks to @izo1 for respective findings and 
advises), which are natively implemented under macOS OoB and neither 
need the above firmware update nor the respective 
AppleEthernetAquantiaAqtion kext patch. 	  	 		&nbsp; 	  	 		
E.8.2.2)&nbsp;Intel X540-T1 10-Gbit NIC 	  	 		&nbsp; 	  	 		Thanks to 
some&nbsp;Ubuntu EEPROM modding, I also achieved the successful 
implementation of the&nbsp;Intel X540-T1&nbsp;single port 10GB LAN PCIe 
Adapter by means of the Small-Tree 10GB macOS 10.13 driver. 	  	 		
&nbsp; 	  	 		Some additional notes to the EEPROM modding guideline 
provided by the above link. 	  	 		&nbsp; 	  	 		1.) When creating your 
Ubuntu USB Flash Drive, use&nbsp;RUFUS 3.0&nbsp;and select the GPT 
option to obtain a Ubuntu USB boot drive, fully compatible with your 
UEFI BIOS implementation! 	  	 		&nbsp; 	  	 		2.) To install 
"net-tools", enter the following terminal command 	  	 		 sudo apt 
install net-tools  		 			&nbsp; 		  	  	 		3.) To install "ethtool" 
enter the following terminal command: 	  	 		 sudo apt-get install 
ethtool  		 			&nbsp; 		  	  	 		&nbsp; 	  	 		4.) Within the latest 
Ubuntu distributions, ETH0, ETH1, etc. have been replaced by some weird 
"enp" port-nomenclature, thus the command "ifconfig" would reveal 
something like the following: 	  	 		&nbsp; 	  	 		 	  	 		&nbsp; 	  	 	
	My Intel X540-T1 was assigned to enp225s0. 	  	 		&nbsp; 	  	 		5.) 
With the command "lspci -nn -vvv | grep Ethernet" you have to use in 6.)
 the Vendor/Device-ID entry highlighted by the green rectangle. 	  	 		
&nbsp; 	  	 		   	 		&nbsp; 	  	 		6.) By running the "sudo ethtool -e 
enp225s0 | less" command and eyeballing the offsets, be aware that the 
latter can be distributed over two lines: 	  	 		&nbsp; 	  	 		 	  	 		
&nbsp; 	  	 		&nbsp; 	  	 		You have to count from left to right 
0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f for each pair of digits for each offset.
 	  	 		&nbsp; 	  	 		Thus, the commands I had to run to mod the Intel 
X540-T1 EEPROM were: 	  	 		 sudo ethtool -E enp225s0 magic 0x15288086 
offset 0x48e value 0x0a  sudo ethtool -E enp225s0 magic 0x15288086 
offset 0x48f value 0x00  		 			&nbsp; 		  	  	 		Note that the "magic" 
value implemented in this command has been taken from the "lspci -nn 
-vvv | grep Ethernet" command output, again encircled by a green 
rectangle: 	  	 		&nbsp; 	  	 		   	 		&nbsp; 	  	 		The rest is as 
described in the EEPROM modding guideline linked above. 	  	 		&nbsp; 	 
 	 		The proper Intel X540-T1 PCI SSDT implementation is detailed in 
Section E.9.2) 	  	 		&nbsp; 	  	 		Actually, I am now currently using 
this adaptor in my X99 system configuration. 	  	 		&nbsp; 	  	 		
E.8.2.3)&nbsp;Small-Tree P2EI0G-2T 10-Gbit NIC 	  	 		&nbsp; 	  	 		
The&nbsp;Small-Tree P2EI0G-2T&nbsp;2-Port 10GB LAN PCIe Adapter 
constitutes the actual base line in my X299 10Gbit LAN configuration. It
 works OoB with the Small-Tree 10GB macOS 10.13 driver. 	  	 		&nbsp; 	 
 	 		The proper Small-Tree P2EI0G-2T PCI SSDT implementation is detailed
 in Section E.9.2) 	  	 		&nbsp; 	  	 		E.8.2.4)&nbsp;NetGear ProSave 
XS508M 8-port 10-Gbit Switch 	  	 		&nbsp; 	  	 		As already mentioned 
above, the&nbsp;NetGear ProSave XS508M&nbsp;8-port 10GBit switch 
constitutes the turntable of my 10-GBit Ethernet Network. It further 
connects with a&nbsp;QNAP TS-431X2&nbsp;Quad-core 4-Bay NAS tower with 
Built-in 10GbE SFP+ Port. 	  	 		&nbsp; 	  	 		E.8.2.5) QNAP TS-431X2 
Quad-core 4-Bay NAS tower 	  	 		&nbsp; 	  	 		The&nbsp;QNAP 
TS-431X2&nbsp;Quad-core 4-Bay NAS tower finally harbours 4x 12 
TB&nbsp;Seagate IronWolf&nbsp;drives in RAID 0 configuration (as I 
rather opt for read/write speed than redundancy). 	  	 		&nbsp; 	  	 		
E.8.2.6) 10-GBit Ethernet Optimisation 	  	 		&nbsp; 	  	 		1.) Use SMB 
3.0 instead of AFS for your Ethernet communication. 	  	 		2.) Enable 
Jumbo Frames on your NAS and macOS network settings. 	  	 		3.) The 
service order in your macOS network settings should have your 10-Gbit 
NIC at first position. 	  	 		4.) You can turn off the SMB packet 
signing of the client and server in a secure network. 	  	 		&nbsp; 	  	
 		Incoming SMB 	  	 		Enter the following terminal commands: 	  	 		 
sudo -s  echo "[default]" &gt;&gt; /etc/nsmb.conf  echo 
"signing_required=no" &gt;&gt; /etc/nsmb.conf  exit  		 			&nbsp; 		  	 
 	 		Outgoing SMB: 	  	 		&nbsp; 	  	 		Enter the following terminal 
commands: 	  	 		 smbutil statshares -a  sudo defaults write 
/Library/Preferences/SystemConfiguration/com.apple.smb.server 
SigningRequired 0 	  	 		&nbsp; 	   	 		E.9)&nbsp;ASUS Prime X299 Deluxe
 PCI Device Implementation 	  	 		&nbsp; 	  	 		In order to properly 
implement all PCI device drivers on his/her system and build, one needs 
adequate ACPI DSDT Replacements and a sophisticated system 
SSDTs.&nbsp;Both requirements have been originally successfully 
implemented for the ASUS Prime X299 Deluxe by our gorgeous @apfelnico. 
Many thanks for the extensive efforts and extremely fruitful and 
brilliant work! Subsequently, I&nbsp;adopted the ACPI DSDT Replacements 
and system SSDTs in concordance with SMBIOS iMacPro1,1. Some ACPI DSDT 
Replacements are still part of the config.plist contained in 
my&nbsp;actual respective X299 EFI-Folder distribution. Others are part 
of my System SSDTs provided in my&nbsp;X299-System-SSDTs Github 
repository.Note that the ACPI DSDT Replacements in config.plist and 
System SSDTs are build and PCIe slot population dependent and have to be
 verified and adopted or modified for all mainboards different from the 
ASUS Prime X299 Deluxe and builds or PCIe slot populations different 
from the one that constitutes the baseline of this guide.  		 			&nbsp; 
		  		 			For the ASUS Prime X299 Deluxe I will use in the following the
 PCIe Slot nomenclature depicted below: 		 	  	 		&nbsp; 	   	 		
&nbsp;&nbsp; 	   	 		&nbsp; 	   	 		The verification and likely 
adaptation/modification can be performed by the help of 
IOREGistryExplorer. 	   	 		&nbsp; 	   	 		How to adopted or modify the 
ACPI DSDT Replacement Patches and System SSDT implementations is 
detailed within&nbsp;this short guideline&nbsp;by means of the OSXWIFI 
PCIe Adaptor implementation in PCIe Slot-3. I hope that by this specific
 example it rapidly becomes evident that the correct PCI Device 
implementation cannot be outlined for each individual "build-in" or 
"slot-specific" PCI device within this guide. The complexity and effort 
would just exceed by far all available capacities and indeed require the
 implementation of a separate guide and thread in addition. I therefore 
hope on your skills and flexibility to extend and apply the approach and
 methodology detailed above to any other "build-in" or "slot-specific" 
PCI device yet to be adopted or implemented. 	   	 		Important 
Note:&nbsp;It is strongly recommend to perform a stepwise SSDT PCI 
Device implementation, starting with one single specific PCI device. 
Once this PCI device has been successfully implemented, another SSDT PCI
 Device module can be added and verified. In case that the 
implementation of a specific PCI Device would be erroneous and fail, it 
would simply disappear from Section "PCI" of Apple's System report. To 
facilitate the stepwise PCI device implementation, the former 
SSDT-X299-iMacPro.aml has been split into separated modules now forming 
part of my&nbsp;X299-System-SSDTs Github repository. 	   	 		&nbsp; 	  	
 		 			Also keep always in mind to modify/adopt the ACPI replacements in
 your config.plist in parallel when ever necessary! 		  		 			&nbsp; 		 
 		 			Note once more that the ACPI DSDT Replacement Patches and 
SSDT-X299-iMacPro.aml implementation detailed below requires SMBIOS 
iMacPro1,1. 		 	  	 		&nbsp; 	   	 		E.9.1)&nbsp; ACPI DSDT Replacement 
Implementation 	  	 		&nbsp; 	  	 		Note once more that all required 
ACPI DSDT Replacements are already implemented in the config.plist in 
the /EFI/CLOVER/ directory of my&nbsp;actual respective X299 EFI-Folder 
distribution&nbsp;or are directly part of the System SSDTs provided in 
my&nbsp;X299-System-SSDTs Github repository. In the config.plist, the 
ACPI DSDT Replacements are disabled by default, thus we will now open 
the config.plist in the /EFI/CLOVER/ directory of our 10.13 System Disk 
EFI-Folder with Clover Configurator and stepwise adopt (if necessary) 
and enable the different required DSDT replacement patches in Clover 
Configurator Section "ACPI" under "DSDT patches", by also discussing 
their respective function and impact. 	  	 		&nbsp; 	  	 		a.) The PC00 
-&gt; PCI0 ACPI DSDT replacement patch has the main aim to achieve a 
SMBIOS iMacPro1,1specific PCI implementation. Note that under SMBIOS 
iMacPro1,1 all other PC0x definitions remain unchanged. 	  	 		&nbsp; 	 
 	 		Please enable now the PC0x -&gt; PCIx ACPI DSDT replacement patch. 
	  	 		 Comment:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
Find*[Hex]&nbsp; &nbsp;&nbsp; Replace [Hex] PC00 -&gt; PCI0&nbsp; &nbsp;
 &nbsp; &nbsp; 50433030&nbsp; &nbsp; &nbsp;&nbsp; 50434930  		 			&nbsp;
 		  	  	 		b.) OSI -&gt; XOSI, EC0_ -&gt; EC__ and H_EC&nbsp; -&gt; 
EC__ are once more ACPI DSDT replacement patches to achieveconsistency 
with the SMBIOS iMacPro1,1 variable naming. 	  	 		&nbsp; 	  	 		i.) 
XOSI functionality is required as explained by @RehabMan. 	  	 		&nbsp; 
	  	 		The ACPI code can use the_OSI method (implemented by the ACPI 
host) to check which Windows version is running. Most DSDT 
implementations will vary the USB configuration depending on the active 
Windows version. When running OS X, none of the DSDT _OSI("Windows 
&lt;version&gt;") checks will return "true" as there is only response 
from "Darwin". This issue can be solved by implementing the "OS Check 
Fix" family of DSDT patches in the SSDT. By DSDT patching we can 
simulate a certain version of Windows although running Darwin and we can
 obtain a system behaviour similar to a windows version specific 
environment. 	  	 		&nbsp; 	  	 		ii.) On the Asus X299 Prime Deluxe and
 most likely on all other X299 mobos we have the EC0 and H_EC 
controllers,which have to be renamed to 'EC' for proper USB power 
management.&nbsp; Thus once more investigate your mainboard specific 
IOREG entry and enable both EC0_ -&gt; EC__ or and H_EC&nbsp; -&gt; EC__
 DSDT Replacement Patches. 	  	 		 Comment:&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp;&nbsp; Find*[Hex]&nbsp; &nbsp; &nbsp; Replace [Hex] OSI 
-&gt; XOSI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5f4f5349&nbsp; &nbsp; 
&nbsp; &nbsp; 584f5349 EC0_ -&gt; EC__&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
4543305f&nbsp; &nbsp; &nbsp; &nbsp; 45435f5f H_EC&nbsp; -&gt; EC__&nbsp;
 &nbsp; &nbsp; &nbsp; 485f4543&nbsp; &nbsp; &nbsp; &nbsp; 45435f5f  		 	
		&nbsp; 		  	  	 		c.) The HEC1 -&gt; IMEI and IDER-&gt;MEID ACPI DSDT 
Replacement patches are Intel Management Engine Interface relatedand are
 vital as MacOS requires the variable names "IMEI" and "MEID" to load 
the 'AppleIntelMEIDriver'. The latter functionality solves the 
'iTunes/Apple Store Content Access Problem' which is 
discussed&nbsp;here. 	  	 		&nbsp; 	  	 		Please enable now both ACPI 
DSDT Replacement patches independent from your mainboard. 	  	 		 
Comment:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Find*[Hex]&nbsp;
 &nbsp; &nbsp;&nbsp; Replace [Hex] HEC1 -&gt; IMEI&nbsp; &nbsp; &nbsp; 
&nbsp;&nbsp; 48454331&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 494d4549 
IDER-&gt;MEID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 49444552&nbsp; &nbsp; 
&nbsp; &nbsp;&nbsp; 4d454944  		 			&nbsp; 		  	  	 		d.) The LPC0 -&gt;
 LPCB ACPI DSDT Replacement Patch is AppleLPC and SMBus related and is 
applied for consistency withthe variable naming on a real Mac. Note that
 LPCB injects AppleLPC, which however is not required in the X299 
environment. X299 Systems seem to have sleep problems with the SMBus 
properties injected. Thus, LPCB will not be implemented by means of any 
SSDT. 	  	 		&nbsp; 	  	 		Please enable now this ACPI DSDT replacement 
patch independent from your mainboard. 	  	 		 Comment:&nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Find*[Hex]&nbsp; &nbsp; &nbsp; 
&nbsp;&nbsp; Replace [Hex] LPC0 -&gt; LPCB&nbsp; &nbsp; &nbsp; 
&nbsp;&nbsp; 4c504330&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 4c504342  
		 			&nbsp; 		  	  	 		e.) FPU_-&gt;MATH, TMR_-&gt;TIMR, PIC_-&gt;IPIC 
are all ACPI DSDT Replacement Patches for consistency with the 
variablenaming on a real Mac. The variables are however functionless on 
either our X299 boards or real Macs. 	  	 		&nbsp; 	  	 		Please enable 
now all three ACPI DSDT Replacement Patches independent from your 
mainboard. 	  	 		 Comment:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp;&nbsp; Find*[Hex]&nbsp; &nbsp; &nbsp; &nbsp; Replace [Hex] FPU_ 
-&gt; MATH&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 4650555f&nbsp; &nbsp; &nbsp;
 &nbsp; &nbsp; 4d415448 TMR_ -&gt; TIMR&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;
 544d525f&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 54494d52 PIC_ -&gt; 
IPIC&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 5049435f&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 49504943  		 			&nbsp; 		  	  	 		f.) The SMBS._ADR -&gt; 
XSBU.XADR Replacement frees SBUS two show up in IOREG. In principle we 
have two devices with the same address, one called SMBS and the other 
one called SBUS. SBUS will never show up in IOREG as long SMBS exists. 
But SBUS is exactly the variable we need in concordance with the IOREG 
from the iMacPro Dump. 	  	 		&nbsp; 	  	 		Please enable now this ACPI 
DSDT replacement patch independent from your mainboard. 	  	 		 
Comment:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp;&nbsp; Find*[Hex]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Replace [Hex] SMBS._ADR -&gt; 
XSBU.XADR&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 534d4253 085f4144 52&nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 58534255 08584144 52  		 			&nbsp; 		 
 	  	 		g.) The DSM -&gt; XDSM DSDT replacement patch is vital for 
loading the SSDT-X299-iMacPro.aml, as all DSM methods used in 
theoriginal DSDT do have a not compatible structure totally different 
from the real Mac environment. Without any fix, all DSM methods would be
 simply ignored. Note that one single device can have only one DSM 
method, which can assign additional properties to the respective device.
 	  	 		&nbsp; 	  	 		Thus please enable the latter DSDT replacement 
patch completely independent from your mainboard! 	  	 		 Comment:&nbsp;
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Find*[Hex]&nbsp; &nbsp; &nbsp;
 &nbsp;&nbsp; Replace [Hex] _DSM -&gt; XDSM&nbsp; &nbsp; &nbsp; 
&nbsp;&nbsp; 5f44534d&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5844534d 
 		 			&nbsp; 		  	  	 		h.) The 56 CPxx -&gt; PRxx replacements are 
i9-7980XE specific and result in a proper CPU core reordering as well as
 in a iMac Pro specific CPU core variable naming. 	  	 		&nbsp; 	  	 		
All i9-7980XE users can now enable all 56 CPxx -&gt; PRxx replacements. 
All users of CPUs different from the i9-7980XE have to adopt/modify the 
56 CPxx -&gt; PRxx replacements in concordance with their original IOREG
 CPU core values. 	  	 		 Comment:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp;&nbsp; Find*[Hex]&nbsp; &nbsp; &nbsp; &nbsp; Replace [Hex] CP00 
-&gt; PR00&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503030&nbsp; &nbsp; &nbsp;
 &nbsp; &nbsp; 50523030 CP01 -&gt; PR01&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;
 43503031&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523031 CP02 -&gt; 
PR02&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503032&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523032 CP03 -&gt; PR03&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503033&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523033 CP04 -&gt; 
PR04&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503034&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523034 CP05 -&gt; PR05&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503035&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523035 CP06 -&gt; 
PR06&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503036&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523036 CP07 -&gt; PR07&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503037&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523037 CP08 -&gt; 
PR08&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503038&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523038 CP09 -&gt; PR09&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503039&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523039 CP0E -&gt; 
PR10&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503045&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523130 CP0F -&gt; PR11&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503046&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523131 CP10 -&gt; 
PR12&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503130&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523132 CP11 -&gt; PR13&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503131&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523133 CP12 -&gt; 
PR14&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503132&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523134 CP13 -&gt; PR15&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503133&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523135 CP14 -&gt; 
PR16&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503134&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523136 CP15 -&gt; PR17&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503135&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523137 CP1C -&gt; 
PR18&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503143&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523138 CP1D -&gt; PR19&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503144&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523139 CP1E -&gt; 
PR20&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503145&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523230 CP1F -&gt; PR21&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503146&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523231 CP20 -&gt; 
PR22&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503230&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523232 CP21 -&gt; PR23&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503231&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523233 CP22 -&gt; 
PR24&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503232&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523234 CP23 -&gt; PR25&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503233&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523235 CP24 -&gt; 
PR26&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503234&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523236 CP25 -&gt; PR27&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503235&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523237 CP2A -&gt; 
PR28&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503241&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523238 CP2B -&gt; PR29&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503242&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523239 CP2C -&gt; 
PR30&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503243&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523330 CP2D -&gt; PR31&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503244&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523331 CP2E -&gt; 
PR32&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503245&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523332 CP2F -&gt; PR33&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503246&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523333 CP30 -&gt; 
PR34&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503330&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523334 CP31 -&gt; PR35&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503331&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523335 CP0A -&gt; 
PR36&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503041&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523336 CP0B -&gt; PR37&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503042&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523337 CP0C -&gt; 
PR38&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503043&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523338 CP0D -&gt; PR39&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503044&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523339 CP16 -&gt; 
PR40&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503136&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523430 CP17 -&gt; PR41&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503137&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523431 CP18 -&gt; 
PR42&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503138&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523432 CP19 -&gt; PR43&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503139&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523433 CP1A -&gt; 
PR44&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503141&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523434 CP1B -&gt; PR45&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503142&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523435 CP26 -&gt; 
PR46&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503236&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523436 CP27 -&gt; PR47&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503237&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523437 CP28 -&gt; 
PR48&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503238&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523438 CP29 -&gt; PR49&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503239&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523439 CP32 -&gt; 
PR50&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503332&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523530 CP33 -&gt; PR51&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503333&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523531 CP34 -&gt; 
PR52&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503334&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523532 CP35 -&gt; PR53&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503335&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523533 CP36 -&gt; 
PR54&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 43503336&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; 50523534 CP37 -&gt; PR55&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 
43503337&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50523535  		 			&nbsp; 		  	 
 	 		Resulting CPU Core Implementation: 	  	 		&nbsp; 	  	 		 	  	 		
&nbsp; 	  	 		 			E.9.2)&nbsp; System SSDT PCI Device Implementation 		 
	  	 		&nbsp; 	  	 		 	  	 		&nbsp; 	  	 		 			For the proper PCI device
 driver implementation (detailed in the figure above), we now have to 
revise and likely adopt or modify all System SSDTs provided within 
my&nbsp;X299-System-SSDTs Github repository.Note that each SSDT contains
 a DefinitionBlock entry and the underlying PCI device implementation. 
In case of necessary modifications/adaptations, don't forget to also 
modify/adapt the respective DefinitionBlock entries in concordance with 
your IOREG entries. The entire SSDT structure is now completely module 
like. Each module can be independently added, changed or removed in 
dependence of your specific build, needs and requirements. A stepwise 
implementation of the individual PCI device modules is highly 
recommended!E.9.2.1) - HDEF - onboard PCI Audio Controller PCI 
Implementation:The&nbsp;SSDT-X299-HDEF.aml&nbsp;onboard Realtek ALC 
S1220A Audio Controller chipset HDEF PCI device implementation is valid 
for the ASUS Prime X299 Deluxe and likely for all other mainboards with 
the same Audio Controller chipset. It is a build-in device and does not 
have any slot specific dependency. Note the CAVS -&gt; HDEF replacement 
directly performed within the SSDT!E.9.2.2) - GFX0, HDAU - GPU and 
HDMI/DP Audio PCI implementation: 			&nbsp; 			 				A.) AMD Radeon RX 
GPUs 			  			 				&nbsp; 			  			 				 					The Github X299 SSDT 
repository now contains the following AMD GFX0, HDAU ASUS Prime X299 
Deluxe PCIe Slot-1 SSDTs: 				  				 					&nbsp; 				  				 					
1.)&nbsp;SSDT-X299-Vega64.aml 				  				 					2.) SSDT-X299-Vega56.aml 	
			  				 					3.)&nbsp;SSDT-X299-Vega-Fontier.aml 				  				 					
4.)&nbsp;SSDT-X299-RX580.aml 				  				 					
5.)&nbsp;SSDT-X299-RX560.aml&nbsp; &nbsp; 				 			 			
The&nbsp;SSDT-X299-Vega.aml&nbsp;GFX0 and HDAU PCI device implementation
 is valid for SMBIOS iMacPro1,1 (GFX0), the ASUS Prime X299 Deluxe and 
any Radeon RX Vega 64 GPU implemented in PCIe Slot 1.It is a build and 
PCIe slot population dependent device implementation. Vega GPU users 
with more than one graphics card, with with a Vega graphics card in a 
PCIe slot different from PCIe Slot 1 or with a mainboard different from 
the ASUS Prime X299 Deluxe, will have to adopt the respective device 
path entries PC02.BR2A, ACPI DSDT replacements and PCIe Slot definition 
following their respective IOREG entries. Note in this context the 
actual SL05 -&gt; PEGP ACPI DSDT replacements directly performed within 
the SSDT.The above default Vega PCI device implementation performs an OC
 of an air-flow Nitro+ Vega 64 GPU of up to 1630 Mhz while considering 
an IDLE fan speed of 1500 Mhz. This seems sufficient to remain with GPU 
temps of about 80 deg C under GPU load conditions (e.g. Valley 
Benchmark), while not exceeding any comfortable noise level.The latter 
Vega properties are achieved by means of a sophisticated 
"PP_PhmSoftPowerPlayTable" and "PP_DisablePowerContainment" and 
"PP_FuzzyFanControl" SSDT implementation.Everybody can change the 
respective Vega properties by means of&nbsp;&nbsp;VGTab-en.app&nbsp;, 
which provides a modified "PP_PhmSoftPowerPlayTable" (output-file 
VegaTab_64_data.txt), which can replace the "PP_PhmSoftPowerPlayTable", 
currently implemented in my SSDT-X299-Vega.aml distribution. E.g. users 
with a water-blocked Nitro+ Vega 64 like myself want to further screw 
the max. GPU OC frequencies, etc., while others might want to further 
improve the fan speed behaviour on air-flow Vegas..Below the 
"PP_PhmSoftPowerPlayTable" for my custom water-blocked Sapphire Nitro+ 
Vega 64 8B, with P7 Core Frequency of 1680 Mhz, P7 Core Voltage of 1200 
mV, P3 Memory Frequency of 1050 Mhz and a Memory Voltage of 1350 mV. 		 
 		 			&nbsp; 		  		 			PP_PhmSoftPowerPlayTable: 		  		 			   0x9d, 
0x02, 0x08, 0x01, 0x00, 0x5c, 0x00, 0x37,   0x07, 0x00, 0x00, 0xec, 
0x2b, 0x00, 0x00, 0x1b,   0x00, 0x48, 0x00, 0x00, 0x00, 0x80, 0xa9, 
0x03,   0x00, 0xf0, 0x49, 0x02, 0x00, 0x32, 0x00, 0x08,   0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x02, 0x01,   0x5c, 0x00, 0x36, 0x02, 0x2d, 0x02, 0x94, 0x00,   
0x85, 0x01, 0xaf, 0x00, 0x19, 0x01, 0x7a, 0x00,   0x8c, 0x00, 0xa3, 
0x01, 0x00, 0x00, 0x00, 0x00,   0x59, 0x02, 0x00, 0x00, 0x90, 0x00, 
0x8f, 0x02,   0x54, 0x01, 0x2a, 0x01, 0x7e, 0x01, 0x00, 0x71,   0x02, 
0x00, 0x71, 0x02, 0x02, 0x02, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 
0x08, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x07, 
0x00,   0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 
0x01, 0x08, 0x20, 0x03, 0x84, 0x03,   0xb6, 0x03, 0xe8, 0x03, 0x1a, 
0x04, 0x4c, 0x04,   0x7e, 0x04, 0xb0, 0x04, 0x01, 0x01, 0x46, 0x05,   
0x01, 0x01, 0x84, 0x03, 0x00, 0x05, 0x60, 0xea,   0x00, 0x00, 0x00, 
0xdc, 0x4a, 0x01, 0x00, 0x01,   0x00, 0x77, 0x01, 0x00, 0x02, 0x90, 
0x91, 0x01,   0x00, 0x03, 0x6c, 0xb0, 0x01, 0x00, 0x04, 0x01,   0x08, 
0xd0, 0x4c, 0x01, 0x00, 0x00, 0x00, 0x80,   0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x88, 0xbc,   0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
0x00,   0x00, 0x00, 0x00, 0x98, 0xfc, 0x01, 0x00, 0x02,   0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x90, 0x0e, 0x02, 0x00, 0x03, 
0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x2f, 0x02,   
0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x70, 
0x56, 0x02, 0x00, 0x05, 0x00,   0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
0x00, 0x60,   0x7a, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,   0x01, 
0x00, 0x00, 0x00, 0x40, 0x90, 0x02, 0x00,   0x07, 0x00, 0x00, 0x00, 
0x00, 0x01, 0x00, 0x00,   0x00, 0x00, 0x03, 0x60, 0xea, 0x00, 0x00, 
0x00,   0xdc, 0x4a, 0x01, 0x00, 0x00, 0x90, 0x5f, 0x01,   0x00, 0x00, 
0x00, 0x08, 0x28, 0x6e, 0x00, 0x00,   0x00, 0x2c, 0xc9, 0x00, 0x00, 
0x01, 0xf8, 0x0b,   0x01, 0x00, 0x02, 0x80, 0x38, 0x01, 0x00, 0x03,   
0x90, 0x5f, 0x01, 0x00, 0x04, 0xf4, 0x91, 0x01,   0x00, 0x05, 0xd0, 
0xb0, 0x01, 0x00, 0x06, 0xc0,   0xd4, 0x01, 0x00, 0x07, 0x00, 0x08, 
0x6c, 0x39,   0x00, 0x00, 0x00, 0x24, 0x5e, 0x00, 0x00, 0x01,   0xfc, 
0x85, 0x00, 0x00, 0x02, 0xac, 0xbc, 0x00,   0x00, 0x03, 0x34, 0xd0, 
0x00, 0x00, 0x04, 0x68,   0x6e, 0x01, 0x00, 0x05, 0x08, 0x97, 0x01, 
0x00,   0x06, 0xec, 0xa3, 0x01, 0x00, 0x07, 0x00, 0x01,   0x68, 0x3c, 
0x01, 0x00, 0x00, 0x01, 0x04, 0x3c,   0x41, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x50, 0xc3,   0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x35, 0x01,   
0x00, 0x01, 0x00, 0x00, 0x28, 0x9a, 0x01, 0x00,   0x02, 0x00, 0x00, 
0x01, 0x08, 0x00, 0x98, 0x85,   0x00, 0x00, 0x78, 0xb4, 0x00, 0x00, 
0x60, 0xea,   0x00, 0x00, 0x50, 0xc3, 0x00, 0x00, 0x01, 0x78,   0xff, 
0x00, 0x00, 0x40, 0x19, 0x01, 0x00, 0xb4,   0x27, 0x01, 0x00, 0x50, 
0xc3, 0x00, 0x00, 0x02,   0x80, 0x38, 0x01, 0x00, 0xdc, 0x4a, 0x01, 
0x00,   0xdc, 0x4a, 0x01, 0x00, 0x50, 0xc3, 0x00, 0x00,   0x03, 0xdc, 
0x4a, 0x01, 0x00, 0x90, 0x5f, 0x01,   0x00, 0x90, 0x5f, 0x01, 0x00, 
0x50, 0xc3, 0x00,   0x00, 0x04, 0x90, 0x5f, 0x01, 0x00, 0x00, 0x77,   
0x01, 0x00, 0x90, 0x5f, 0x01, 0x00, 0x50, 0xc3,   0x00, 0x00, 0x05, 
0x00, 0x77, 0x01, 0x00, 0x90,   0x91, 0x01, 0x00, 0x90, 0x5f, 0x01, 
0x00, 0x50,   0xc3, 0x00, 0x00, 0x06, 0x6c, 0xb0, 0x01, 0x00,   0x6c, 
0xb0, 0x01, 0x00, 0x00, 0x77, 0x01, 0x00,   0x50, 0xc3, 0x00, 0x00, 
0x07, 0xc0, 0xd4, 0x01,   0x00, 0xc0, 0xd4, 0x01, 0x00, 0x90, 0x91, 
0x01,   0x00, 0x50, 0xc3, 0x00, 0x00, 0x01, 0x18, 0x00,   0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x0b, 0xe4,   0x12, 0xdc, 0x05, 0xfc, 0x08, 
0x41, 0x00, 0x0f,   0x00, 0x54, 0x03, 0x90, 0x01, 0x90, 0x01, 0x90,   
0x01, 0x90, 0x01, 0x90, 0x01, 0x90, 0x01, 0x90,   0x01, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x02, 0x04,   0x21, 0x07, 0x08, 0x01, 0x08, 0x01, 
0x08, 0x01,   0x2c, 0x01, 0x00, 0x00, 0x4a, 0x00, 0x69, 0x00,   0x4a, 
0x00, 0x4a, 0x00, 0x5f, 0x00, 0x73, 0x00,   0x73, 0x00, 0x64, 0x00, 
0x40, 0x00, 0x90, 0x92,   0x97, 0x60, 0x96, 0x00, 0x90, 0x46, 0x00, 
0x00,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x02,   0x02, 0xd4, 0x30, 0x00, 0x00, 
0x02, 0x10, 0x60,   0xea, 0x00, 0x00, 0x02, 0x10   		  		 			Note that I
 also changed the Nitro+ Vega 64 firmware 
to&nbsp;https://www.techpowerup.com/vgabios/200283/200283&nbsp;(at BIOS 
jumper position 1). Don't forget to backup the original firmware, in 
case you return it to the seller! This thread might provide additional 
information in this 
context:&nbsp;https://forums.macrumors.com/threads/amd-polaris-vega-gpu-macos-support.2083168/.As
 already mentioned before, within my current Vega SSDT PCI device 
implementation, all available ports on the Gigabyte Vega 64 (3x HDMI, 3x
 DP), including multi-monitor support and display hot plug are 
automatically and successfully implemented. However, it seems that 
DP-port issues (black screen) remain, when employing the respective Vega
 SSDT PCI device implementation on Sapphire Nitro+ Vega 64 (2x HDMI, 
2xDP) or ASUS Strix Vega 64 (2x HDMI, 2x DP, 1x DVI) GPUs, which only 
can be removed by adding Whatevergreen.kext. Within such configuration, 
multi-monitor support and display hot plug can be fully achieved also in
 case of the latter custom Vegas (both 10.13.6 SU and 10.14.1). 
Whatevergreen.kext only seems required for all Vegas possessing less 
than 6 physical ports (including the original Vegas like Frontier and 
Vega 64), else the current Vega SSDT PCI device implementation does 
pretty well it's job, including successful system sleep/wake.. 		  		 		
	&nbsp; 		  		 			SSDT-X299-Vega-Frontier.aml&nbsp;contains 
former&nbsp;Kamarang frame buffer SSDT implementation by @apfelnico for 
1x Radeon Vega Frontier in PCIe Slot 1 of ASUS Prime X299 Deluxe. 		  		
 			&nbsp; 		  		 			B.) Nvidia GPUs&nbsp;&nbsp;The 
actual&nbsp;SSDT-X299-Nvidia.aml&nbsp;GFX0 and HDAU PCI device 
implementation is valid for SMBIOS iMacPro1,1 (GFX0), the ASUS Prime 
X299 Deluxe and any Nvidia Graphics Card implemented in PCIe Slot 1.It 
is a build and PCIe slot population dependent device implementation. 
Nvidia Graphics Card users with more than one graphics card, with a 
Nvidia graphics card in a PCIe slot different from PCIe Slot 1 or with a
 mainboard different form the ASUS Prime X299 Deluxe, will have to adopt
 the respective device path entries PC02.BR2A, ACPI DSDT replacements 
and PCIe Slot definitions following their respective IOREG entries. Note
 in this context the actual SL05 -&gt; PEGP and PEGP -&gt; GFX0 ACPI 
replacements directly performed within the SSDT.Also note that with 
10.13.4, Apple changed the com.apple.driver.AppleHDAController 
implementation. To make the NVIDIA HDAU PCI device driver work for e.g. a
 GeForce GTX 1080 Ti, one needs to add the following KextToPatch entry 
in Section "Kernel and kext Patches" of Clover Configurator, as already 
implemented but yet disabled in the config.plist contained 
in&nbsp;my&nbsp;actual respective X299 EFI-Folder distribution: 			
&nbsp; 		  		 			 Name*                                 Find* [HEX]     
    Replace* [HEX]        Comment com.apple.driver.AppleHDAController   
DE100B0E            DE10EF10              FredWst DP/HDMI patch  			 			
	&nbsp; 			   			 				Thus, please all Nvidia users enable and like 
adopt the NVIDIA HDAU patch for your particular Nvidia GPU in dependence
 of the respective device-id.Credits to @FreedWst and thanks to 
@fabiosun&nbsp;for pointing me to this solution.&nbsp;   				Users of 
Whatevergreen.kext might be able to drop this KextToPatch entry, as the 
latter kext already properly implements the Nvidia HDAU PCI driver. 			 
 		  		 			&nbsp; 		  		 			&nbsp; 		  		 			E.9.2.3) - PMCR - onboard 
Power Management Controller (PMC) PCI 
Implementation:The&nbsp;SSDT-X299-PMCR.aml&nbsp;onboard Power Management
 PMCR PCI device implementation should be valid for all X299 mainboards 
and should not require any build specific adaptation/modification. Note 
the PMC1 -&gt; PMCR ACPI replacement directly performed within the 
SDDT.E.9.2.4) - USBX:When using the XHCI device name for USB (see the 
XHCI PCI Device Implementation below), one observes a bunch of USB Power
 Errors when booting the system. The&nbsp;SSDT-X299-USBX.aml&nbsp;PCI 
device implementation fixes this errors.E.9.2.5) - XHCI - onboard 
Extended Host Controller Interface (XHCI) PCI 
Implementation:The&nbsp;SSDT-X299-XHCI.aml&nbsp;USB3.0 ASMedia ASM1074 /
 Intel X299 Series Chipset XHCI PCI device implementation is valid for 
the ASUS Prime X299 Deluxe and for all other X299 mainboards with the 
same XHC controller chipset. Verify and adopt/modify if necessary device
 path "PCI0.XHCI" and XHCI PCI device implementation by means of 
IOREG.E.9.2.6) - XHC2,3,4 - ASMedia ASM3142 USB 3.1 Controller PCI 
Implementation:The&nbsp;SSDT-X299-XHC.aml&nbsp;onboard ASMedia 
ASM3142/ASM1543 USB 3.1 XHC2,XHC3,XHC4 controller PCI device 
implementation is valid for the ASUS Prime X299 Deluxe and for all other
 X299 mainboards with the same XHC USB3.1 controller ASMedia ASM3142 
chipset configuration. Note the following ACPI 
ReplacementsPCI0.RP01.PXSX -&gt; PCI0.RP01.XHC2PCI0.RP05.PXSX -&gt; 
PCI0.RP01.XHC3PCI0.RP07.PXSX -&gt; PCI0.RP01.XHC4within the SSDT in 
concordance with the respective SMBIOS iMacPro1,1 variable naming. 
Verify and adopt/modify if necessary the corresponding "PCI0.RP01.XHC2",
 "PCI0.RP05.XHC3", "PCI0.RP07.XHC4" PCI device implementations by means 
of IOREG.E.9.2.7) ANS1, ANS2 - Apple NVMe Controller PCI 
Implementation:The&nbsp;SSDT-X299-ANS.aml&nbsp;Apple NVMe Controller 
ANS1 and ANS2 PCI implementations are of purely cosmetic nature and are 
valid for the ASUS Prime X299 Deluxe. Note the following ACPI 
ReplacementsPCI0.RP09.PXSX -&gt; PCI0.RP09.ANS1PCI0.RP21.PXSX -&gt; 
PCI0.RP21.ANS2performed within the SDDT in concordance with the 
respective SMBIOS iMacPro1,1 variable naming.Verify and adopt/modify if 
necessary the "PCI0.RP09.ANS1" and "PCI0.RP21.ANS2" PCI device 
implementations by means of IOREG.E.9.2.8) - SAT1 - Intel AHCI SATA 
Controller PCI Implementation:The&nbsp;SSDT-X299-SAT1.aml&nbsp;onboard 
Intel AHCI SATA controller PCI device implementation is valid for the 
ASUS Prime X299 Deluxe and for all other X299 mainboards with the same 
AHCI SATA controller chipset. Verify and adopt/modify if necessary 
device path "PCI0.SAT1" and PCI device implementations by means of 
IOREG.E.9.2.9) - THSS - Intel Thermal Subsystem Controller 
Implementation:The&nbsp;SSDT-X299-THSS.aml&nbsp;onboard Intel X299 
Series Thermal Subsystem controller PCI device implementation, recently 
provided by @apfelnico&nbsp;is valid for the ASUS Prime X299 Deluxe and 
for all other X299 mainboards with the same Thermal Subsystem controller
 chipset.E.9.2.10) XGBE - 10GBit NIC 
Implementation:SSDT-X299-ACQU.aml,&nbsp;SSDT-X299-X540-T1.aml&nbsp;and&nbsp;SSDT-X299-P2EI0G-2T.aml&nbsp;perform
 a XGBE (XGBF) PCI implementation of an Acquantia AQC107-AFW, Intel 
X540-T1 and Small-Tree P2EI0G-2T 10GB NIC, respectively and are mainly 
of cosmetic nature. For each PCIe Adapter and for different PCIe slot 
populations or mainboard implementations, the XGBE PCI device 
implementation needs to be adopted/modified accordingly. This also 
states for the respective ACPI path entries "PC03", "BR3A" and 
respective SL09 -&gt; PEGP and PEGP -&gt; XGBE ACPI Replacements (in 
compliance with the iMac Pro 10GB ACPI variable nomenclature), directly 
performed within each SSDT.E.9.2.11) - ETH0/ETH1 - onboard LAN 
Controller PCI Implementation:Note that 
the&nbsp;SSDT-X299-ETH.aml&nbsp;Intel I219V2 PCI Express Gigabit 
Ethernet and Intel I211VA PCI Express Gigabit Ethernet onboard LAN 
controller ETH0/ETH1 PCI implementations are of pure cosmetic nature and
 only valid for ASUS Prime X299 Deluxe or X299 mainboards with the same 
LAN Controller configuration. Owners of different X299 mainboards have 
to verify and adopt/modify if necessary the device these PCI device 
implementations by means of IOREG. Note the PCI0.GBE1 -&gt; PCI0.ETH0, 
PCI0.RP02.D0A4 -&gt; PCI0.RP02.PXSX and PCI0.RP02.PXSX -&gt; 
PCI0.RP02.ETH1 ACPI replacements directly performed within the 
SSDT.E.9.2.12) - ARPT - OSX WIFI Broadcom BCM94360CD 802.11 a/b/g/n/ac +
 Bluetooth 4.0 AirPort Controller PCI 
Implementation:The&nbsp;SSDT-X299-ARPT.aml&nbsp;OSX WIFI Broadcom 
BCM94360CD 802.11 a/b/g/n/ac + Bluetooth 4.0 AirPort Controller PCI 
device implementation is of pure cosmetic nature and only valid for 
users of the latter WIFI/Bluetooth PCIe Adapter in PCIe Slot 3 of the 
ASUS Prime X299 Deluxe. Users of this PCIe Adapter within a PCIe slot 
population different from PCIe Slot 3 or on a mainboard different form 
the ASUS Prime X299 Deluxe have to likely adapt/modify the respective 
device path "PC03","BR3D","ARPT" and likely also the respective ACPI 
Replacements PC03.BR3D.SL0C -&gt; PC03.BR3D.PEGP and PC03.BR3D.PEGP 
-&gt; PC03.BR3D.ARPT, directly performed within the SSDT. Users of the 
Asus Prime X299 Deluxe onboard Bluetooth chipset controller or with a 
completely different WIFI/Bluetooth configuration have to adopt the 
entire Airport PCI implementation by means of IOREG. 		  		 			&nbsp; 		
  		 			E.9.2.13) - Thunderbolt System Implementation:The current 
Thunderbolt development carefully focuses on iMac Pro SSDT-9.aml and 
DSDT.aml from&nbsp;@TheOfficialGypsy 's&nbsp; iMac Pro dump, which 
appear to be the cornerstone for a correct, proper and complete 
Thunderbolt Hackintosh Local Node implementation.The current development
 status is briefly reflected in posts 		 	    	 		 			 				  				 					
&nbsp;and&nbsp; 				  				  				 					&nbsp; 				   				 					
Constructive contributions by experts are highly desired.Until reaching a
 complete Thunderbolt Hackintosh Local Node 
implementation,&nbsp;SSDT-X299-TB3HP-TTR.aml&nbsp;(for GC-Titan Ridge 
and ASUS TBEX 3) and&nbsp;SSDT-X299-TB3HP-APR.aml&nbsp;(for GC-Alpine 
Ridge) constitute workarounds for achieving TB HotPlug and TB XHC USB 
HotPlug functionality with the respective TB3 PCIe Add-In adopters. Note
 once more that with the GC-Titan Ridge, HotPlug functionality can be 
reached with the THB_C connected. For HotPlug with the other TB 
adaptors, the THB_C must be removed from most of the available 
mainboards. For all TB3 SSDTs provided above, partial contributions by 
@apfelnico, @nmano, @Mork vom Ork, @Matthew82, @maleorderbride&nbsp;and 
@TheRacerMaster&nbsp;shall be mentioned and outlined. Their use with 
mainboards different from ASUS and within PCIe slot populations 
different from PCIe Slot 4 requires the adaptation/modification of 
respective ACPI path definitions ("PC01", "BR1A") or ACPI DSDT Table 
replacements (SL01 -&gt; PEGP and PEGP -&gt; UPSB), directly performed 
within the SSDTs. 				   				 					&nbsp; 				   				 					Video: 
GC-Titan Ridge TB HotPlug + TB USB-C HotPlug under macOS Mojave 
10.14.0&nbsp; 				   				 					&nbsp; 				   				 					GC-Titan Ridge + 
ASUS Prime X299 Deluxe + SSDT-X299-TB3HP-TTR.aml +TB HotPlug TB + TB 
USB-C HotPlug successfully verified under macOS Mojave 10.14.0 				   		
		 					&nbsp; 				   				 					 				   				 					&nbsp; 				   				 			
		Klick the link below to see the video: 				   				 					&nbsp; 				   
				 					https://youtu.be/8P0X5Z7giEg 				   				 					&nbsp; 				   		
		 					Like always, I verified TB HotPlug with my &nbsp;5 TB Lacie 
Rugged Thunderbolt 2 HDD (+ Apple TB3 -&gt; TB2 adopter) and TB USB-C 
HotPlug with my Transcend JetFlash 850 USB 3.1 Type-C Stick. 				   				
 					&nbsp; 				   				 					In the meanwhile, I also successfully 
verified&nbsp;GC-Titan Ridge + ASUS Prime X299 Deluxe + 
SSDT-X299-TB3HP-TTR.aml +TB HotPlug TB + TB USB-C HotPlug&nbsp;under 
macOS High Sierra 10.13.6 				  				 					&nbsp; 				  				 					I also 
successfully verified the&nbsp;GC-Titan Ridge DisplayPort 1.4 and 
DisplayPort 1.4 HotPlug&nbsp;functionality&nbsp; 				  				 					&nbsp; 
				  				 					   				 					&nbsp; 				  				 					   				 					&nbsp; 
				  				 					as well as the&nbsp;Kanex Premium USB-C -&gt; HDMI 4K 
Adapter&nbsp;and&nbsp; Kanex Premium USB-C -&gt; HDMI 4K&nbsp;Adapter 
HotPlug functionality. 				  				 					&nbsp; 				  				 					   				 		
			&nbsp; 				  				 					 				  				 					&nbsp; 				   				 					
E.9.2.14) - DTGP Method:   					SSDT-DTPG.aml&nbsp;is mandatory for all 
SSDT implementations listed above (note the external DTPG method call in
 the definition block of each respective SSDT) and must be always part 
of /EFI/Clover/ACPI/patched.. 				   				 					&nbsp; 				   				 
External (DTGP, MethodObj)    // 5 Arguments (from opcode)  				 					
&nbsp; 				  			 		 	    	 		E.9.2.15) - Debugging Sleep Issues: 	  	 		
&nbsp; 	  	 		For debugging sleep issues as proposed by Pike Alpha, one 
can add&nbsp;SSDT-SLEEP.aml&nbsp;to /EFI/CLOVER/ACPI/patched and follow 
Pike's comment and advices provided 
at&nbsp;https://pikeralpha.wordpress.com/2017/01/12/debugging-sleep-issues/
 	  	 		&nbsp; 	  	 		&nbsp; 	    	E.10) System Overview CPU 
Cosmetics&nbsp;     	As our Skylake-X CPU at present will not be 
properly recognised by OS X, Apple's System Overview ("About This Mac") 
reveals incomplete or simply wrong CPU details. Many times CPU's like 
the i9-7980XE are implemented as "unknown"...    	&nbsp;    	 		I 
recently discovered on InsanelyMac a&nbsp;sophisticated fix&nbsp;of pure
 cosmetic nature developed by&nbsp;Shaneee&nbsp;(also thanks 
to&nbsp;fabiosun&nbsp;for pointing me to this direction), which allows 
to implement those CPU details you want to be implemented. For the sake 
of simplicity, I summarise the necessary steps once more 
below.&nbsp;Note that the following example is only valid for systems 
with English as main system language. If your system language is German,
 French, Spanish, Chinese etc., substitute "English.lproj" in the 
individual commands by the "lproj" of your System language!&nbsp;Thanks 
to @PedroJSkywalker for this latter important advice! 	  	 		&nbsp; 	  	
 		1.) Open a terminal and use the following commands: 	    	 cp 
/System/Library/PrivateFrameworks/AppleSystemInfo.framework/Versions/A/Resources/English.lproj/AppleSystemInfo.strings
 ~/Desktop/  	 sudo mv 
/System/Library/PrivateFrameworks/AppleSystemInfo.framework/Versions/A/Resources/English.lproj/AppleSystemInfo.strings
 
/System/Library/PrivateFrameworks/AppleSystemInfo.framework/Versions/A/Resources/English.lproj/AppleSystemInfo.strings-Backup
    	&nbsp;    	2.) Open "AppleSystemInfo.strings" on your Desktop 
with&nbsp;TextWrangler&nbsp;and change    	 
&lt;key&gt;UnknownCPUKind&lt;/key&gt; 
&lt;string&gt;Unknown&lt;/string&gt;  	 		&nbsp; 	   	 		to what ever 
you want. In my case I choose: 	     	 
&lt;key&gt;UnknownCPUKind&lt;/key&gt; &lt;string&gt;4,5 GHz 18-core 
36-thread Skylake-X i9-7980XE&lt;/string&gt;    	&nbsp;    	Save&nbsp; 
"AppleSystemInfo.strings"    	&nbsp;    	&nbsp;    	3.) Run the 
following terminal commands:    	 sudo codesign -f -s - 
~/Desktop/AppleSystemInfo.strings  	 sudo cp 
~/Desktop/AppleSystemInfo.strings 
/System/Library/PrivateFrameworks/AppleSystemInfo.framework/Versions/A/Resources/English.lproj/
  	 		&nbsp; 	  	 		and reboot your system. 	  	 		&nbsp; 	  	 		4.) 
Open your config.plist with Clover Configurator and in Section "CPU" set
 "Type" to "Unknown". Save the config.plist and reboot. 	  	 		&nbsp; 	 
 	 		5.) Apple's System Overview now will reveal the following details: 
	    	&nbsp;    	&nbsp;    	As fall back option enter the following 
terminal commands:     	 sudo rm 
/System/Library/PrivateFrameworks/AppleSystemInfo.framework/Versions/A/Resources/English.lproj/AppleSystemInfo.strings
  	 sudo mv 
/System/Library/PrivateFrameworks/AppleSystemInfo.framework/Versions/A/Resources/English.lproj/AppleSystemInfo.strings-Backup
 
/System/Library/PrivateFrameworks/AppleSystemInfo.framework/Versions/A/Resources/English.lproj/AppleSystemInfo.string
  	 		&nbsp; 	   	 		and reboot. 	     	&nbsp;     	E.11) ASUS Boot 
Splash Screen Cosmetics     	Based on the ideas and instructions of 
@Matthew82 from InsanelyMac, I achieved an iMacPro ASUS Boot Splash 
Screen     	&nbsp;     	 		 	  	 		&nbsp; 	     	 		by means of the 
following procedure: 	  	 		&nbsp; 	  	 		1.) Installation of the BREW 
distribution&nbsp;(if not already performed in Section B.1): 	  	 		
&nbsp; 	  	 		a.) Open a terminal and change to "bash" shell. 	  	 		
&nbsp; 	  	 		 bash  		 			&nbsp; 		   		 			b.) Now enter the following
 "bash" terminal command and follow the standard BREW installation 
instructions: 		   		 /usr/bin/ruby -e "$(curl -fsSL 
https://raw.githubusercontent.com/Homebrew/install/master/install)"  		 
			&nbsp; 		   		 			2.) After the successful installation of the BREW 
distribution, we have to implement the QT5 distribution, again by using a
 "bash" terminal shell. If not already performed in Section B1.), just 
enter the following "bash" terminal commands: 		  	  	 brew install qt5 
 	 brew link qt5 --force  	 		&nbsp; 	   	 		3.) After successfully 
implementing BREW and QT5, we can now download the actual CodeRush 
UEFIPatch distribution from Github to our home directory with the 
following terminal command: 	   	 git clone 
https://github.com/LongSoft/UEFITool    	&nbsp;    	4.) Now compile the 
UEFI Tool distribution with the following terminal commands:    	&nbsp; 
   	 		 cd /UEFITools/ qmake uefitool.pro make 	  	 		&nbsp; 	  	 		5.) 
Download and unzip&nbsp;iMacPro.raw&nbsp;to your Desktop. 	  	 		&nbsp; 
	  	 		 			6.) Now launch by UEFITool by clicking on the newly compiled 
UEFITool.app in the UEFITools Folder in your home directory. 		  		 			
&nbsp; 		  		 			a.) Select "File" -&gt; "Open image file" and load your
 patched or unpatched BIOS Firmware distribution. 		  		 			&nbsp; 		  	
	 			Select "Search.." in the UEFITool "Edit" Menu and perform a "GUID" 
search of "7BB28B99-61BB-11D5-9A5D-0090273FC14D" with "Header only"... 	
	 	  	 		&nbsp; 	  	 		 			 		  		 			&nbsp; 		  	  	 		 			You will 
receive a message "GUID pattern "7BB28B99-61BB-11D5-9A5D-0090273FC14D" 
found as .... in&nbsp;7BB28B99-....". Double click on that message and 
search for the "Raw section" accompanying the "7BB28B99-...." entry, 
which indeed is the Boot Image, which you can easily verify by 
extracting the raw section body (right-click on "Raw section" and select
 "Extract body") to your Desktop and by subsequently opening the 
extracted raw-file directly with Apple's "Preview.app" (right-click an 
the raw file and select "Open with.." -&gt; Preview.app). 		  		 			
&nbsp; 		  		 			b.) To exchange the default original ASUS Boot Logo 
image file stored in "Raw Section" by the iMacPro.raw image file that 
you previously downloaded to your Desktop,&nbsp; right-click again on 
"Raw section", select this time "Replace body"&nbsp; and select the 
iMacPro.raw image file on your Desktop. 		 	    	&nbsp;    	 		 	    	
&nbsp;    	 		 			Note that the actual image dimension of iMacPro.raw 
(2131pix x 1457pix) was adopted for its use on my 38" LG 38UC99. For 
monitors with reduce screen resolution, iMacPro.raw might have to be 
adopted to an image dimension that suites your particular screen 
resolution, before its upload to "Raw section". If the Boot Logo image 
dimension is too big for your Monitor's screen resolution, you might 
just end up with a black screen during the BIOS initialisation at boot. 
		  		 			&nbsp; 		  		 			To do so, select in the Preview.app Menu 
-&gt; "Tools" -&gt; "Adjust Size". Change the image dimension and save 
the modified image with "File" -&gt; "Export". In the "Export menu" 
press "Save", after selecting "JPEG" under "Format" , after choosing 
"Desktop" as the place to store the image, and after entering the new 
file name, which has to end with ".jpg". 		  		 			&nbsp; 		  		 			
Double-check by right-clicking on the resulting jpg image file and 
selecting "Get Info" that its file size does no exceed 200KB by far. If 
the latter would be the case, you would not be able to save the modified
 BIOS Firware file subsequently. 		  		 			&nbsp; 		  		 			Finally just
 rename your new "XXXX.jpg" file to "XXXX.raw.... 		  		 			&nbsp; 		  	
	 			I guess, that by following the procedure detailed above, it is 
obvious that iMacPro.raw also can be substituted by any other image of 
your personal choice. Just be aware that it's background colour should 
be black (ecstatic reason for a its nice integration within the else 
black ASUS BIOS Boot Screen) 		  		 			&nbsp; 		  		 			c.)&nbsp; After 
replacing "Raw Section" with iMacPro.raw or the XXX.raw image of your 
choice, save your modified BIOS Firmware File with the Option "File" 
-&gt; "Save Image File..." 		  		 			&nbsp; 		  		 			d.) Copy your 
modified BIOS Firmware file to a USB3.0 Flash Drive, formatted with 
FAT32. 		  		 			&nbsp; 		  		 			e.) Reboot, enter the Mainboard BIOS 
and save your BIOS settings to the USB Flash Drive 		  		 			&nbsp; 		  
		 			f.) Flash your mainboard BIOS with the modified BIOS Firmware 		  
		 			&nbsp; 		  		 			g.) Renter the Mainboard BIOS and restore your 
BIOS settings from the USB Flash Drive 		  		 			&nbsp; 		  		 			h.) 
Save your restored BIOS settings with (F7) and (F10), reboot and you are
 done. 		  		 			&nbsp; 		  		 			Just don't forget to set BIOS Setting 
"Boot Logo Display" to "Auto", when using this new approach. Any 
different setting might result in a black screen during BIOS 
initialisation. &nbsp; 		 	    	&nbsp;     	E.12) Native Display 
Brightness Control / Native NightShift Functionality for Monitors with 
DCC/IC Support     	&nbsp;    	1.) Native Display Brightness 
Control&nbsp;    	&nbsp;    	Many of you might miss the ability to 
control the display brightness with the F1/F2 keys on original Apple 
Keyboards, or with FN&amp;F1/FN&amp;F2 on non-Apple keyboards.&nbsp;    
	&nbsp;    	@bensge wrote a small but genius application to do just that
 on any Hackintosh System and to show the native OSX brightness system 
UI.    	&nbsp;    	 		 			 		  		 			&nbsp; 		  	  	 		 			The App works
 for desktops and monitors that support DDC/CI. You have to connect your
 monitor to your GPU either via HDMI or DP. Note that you also have to 
enable DDC/CI support on your monitor to make the program work. 		  		 	
		&nbsp; 		  		 			This application automatically adds itself as a Login
 Item in your User Settings in System Preferences. 		 	  	 		&nbsp; 	  	
 		 			 		  		 			&nbsp; 		   		 			Please carefully read all 
instructions on his&nbsp;NativeDiplayBrightness GitHub&nbsp;page before 
downloading the program. 		   		 git clone 
https://github.com/Bensge/NativeDisplayBrightness/ cd 
~/NativeDisplayBrightness/ xcodebuild  		 			&nbsp; 		  		 			The 
compiled NativeDisplayBrightness.app can be found in 
subfolder&nbsp;~/NativeDisplayBrightness/build/Release 		  		 			&nbsp; 
		  		 			To add the application&nbsp;as a Login Item in your User 
Settings in System Preferences, just double click on the App.&nbsp; 		  
		 			&nbsp; 		  		 			If you're using an original Apple keyboard, this 
app won't work with your F1/F2 keys straight away. On non-Apple 
keyboards it won't work out off the box, even with FN&amp;F1/FN&amp;F2 
as it should work &nbsp;.&nbsp; 		  		 			&nbsp; 		  		 			In both cases
 you need to additionally add two KernelToPatch entries in your 
config.plist in Section "Kernel and Kext Patches" of Clover 
Configurator: 		  		 			 Name*                                  Find* 
[Hex]                                          Replace* [HEX]           
                            Comment   com.apple.driver.AppleHIDKeyboard 
     30783030 30373030 33612c30 78666630 31303032 31      30783030 
30373030 33612c30 78303030 37303033 61      by Wern  
com.apple.driver.AppleHIDKeyboard      30783030 30373030 33622c30 
78666630 31303032 30      30783030 30373030 33622c30 78303030 37303033 
62      by Wern  			 				&nbsp; 			  			 				2.) Native NightShift 
Functionality for Monitors with DDC/IC Support 			  			 				&nbsp; 			  
			 				To enable native NightShift functionality on the 38" LG 38UC99, 
one needs to download and unzip the respective Display Override 
Profile&nbsp;DisplayProductID-76fc,&nbsp;subsequently properly sign the 
file, and finally copy the file 
to&nbsp;/System/Library/Displays/Contents/Resources/Overrides/DisplayVendorID-1e6d/.
 			  			 				&nbsp; 			  			 				The latter to steps can be done by the
 following terminal commands: 			  			 cd ~/Downloads sudo codesign -f 
-s - DisplayProductID-76fc sudo cp DisplayProductID-76fc 
/System/Library/Displays/Contents/Resources/Overrides/DisplayVendorID-1e6d/
  			 				Subsequently you have to reboot and to newly adjust your 
Screen Resolution under "Display" in System Preferences. 			   			 				
&nbsp; 			   			 				 			   			 				&nbsp; 			   			 				And your are 
done:  			   			 				&nbsp; 			   			 				 					 				  				 					&nbsp; 
				  			  			 				Note that the attached Display Override Profile, does
 not allow a LG 38UC99 Monitor Frequency of&nbsp;75Hz. Only 60Hz are 
supported. 			  			 				&nbsp; 			  			 				Many thanks to user 
@Ramalama for providing this approach to our community. NightShift 
should also work for the Acer 38" and Dell 38" Monitors. Yet 
@Ramalama&nbsp;misses the respective EDIDs. Any body with e.g. the Acer 
XR382CQK should immediately&nbsp;&nbsp;upload the requested information 
and contact @Ramalama&nbsp;by posting in this thread! Many thanks in 
advance! 			  			 				&nbsp; 			 		 	    	E.13) Logic-X and Audio Studio
 Software Functionality     	&nbsp;     	The ASUS BIOS patching, 
providing full read/write access for the OSX Kernel to the MSR 0xE2 
register, apparently also circumvents the Intel SKZ7 bug and yet missing
 BIOS microcode implementations. The Xnu CPU Power Management (XCPM) is 
now solely handled by the OSX Kernel, which completely resolves all 
former Logic-X or other studio audio software implementations. The same 
states for all other X299 mainboards with factory-default open MSR 0xE2 
register implementation.    	&nbsp;    	Nevertheless there is a second 
extremely important intrinsic LOGIC X configuration setting, which has 
to be adopted depending on the degree of sophistication of the studio 
audio hardware (Latency) in use.    	&nbsp;    	In the following 
description, I will provide the correct audio preference settings for 
the ASUS Prime X299 with the onboard Realtek ALC S1220A audio chip:    	
&nbsp;    	 		1.) Within Logic X go to "Preferences" -&gt; "Audio" 	  	 
		&nbsp; 	  	 		2.) Under Advanced check "Show Advanced Tools" 	  	 		
&nbsp; 	  	 		3.) Go back to the "Audio" settings and adopt "I/O Buffer 
Size" from "128" to e.g. "512" or even better "1024" Samples, in case 
you really use the onboard Realtek ALC S1220A audio chipset. Users of 
more sophisticated Studio Audio Hardware with better latencies have to 
adopt the I/O Buffer Size accordingly to their hardware implementation. 
	    	&nbsp;    	 		 	  	 		&nbsp; 	     	To check the now flawless 
functionality and performance of Logic-X, download, unzip and run the 
attached Logic-X test sample&nbsp;Test Hyperthreading 
Bug.logicx.zip&nbsp;of @DSM2. attached at the bottom of this originating
 post/guide. Note that the test sample sound volume output is zero, for 
avoiding epileptic or panic attacks at audience side... this is just a 
test sample to check the Logic-X functionality and performance and not a
 chart breaking audio sample.     	&nbsp;     	Start Intel Power Gadget 
(IPG) in parallel and play the test sample with Logic-X:     	&nbsp;    
 	    	&nbsp;     	You will rapidly notice that everything fully behaves
 as expected. The Hyperthreading-sample plays flawless at alternated CPU
 frequencies.      	All credits to @DSM2.     	&nbsp;     	E.14) 
iStatMenus Hardware Monitoring     	&nbsp;     	Thanks to extended tweet
 session between @BJango, @gxsolace&nbsp;and myself, it seems that we 
achieved a major step forward in properly monitoring Skylake-X/X299 
Hardware with iStatMenus. iStatMenus now correctly interfaces with the 
HWSensor and FakeSMC kext distribution provided by @interferenc.     	
&nbsp;     	The actual iStatMenus v6.2&nbsp;distribution can be assessed
 at&nbsp;https://bjango.com/mac/istatmenus/    	&nbsp;    	The actual 
HWSensor and FakeSMC kext distribution of @interferenc can be assessed 
at&nbsp;https://github.com/interferenc/HWSensors    	&nbsp;    	To 
compile the the HWSensor and FakeSMC kexts of @interferenc, perform the 
individual steps detailed below:    	&nbsp;    	1.)    	 git clone 
https://github.com/interferenc/HWSensors  	 		2.) 	   	 cp HWSensors 
~/Desktop/  	 		3.) 	   	 cd ~/Desktop/HWSensors  	 		4.)&nbsp; 	   	 
xcodebuild -project Versioning\ And\ Distribution.xcodeproj/  	 		5.) 	 
  	 xcodebuild -project HWMonitor.xcodeproj/  	 		6.) 	   	 xcodebuild 
-project HWSensors.xcodeproj -alltargets  	 		&nbsp; 	  	 		
Subsequently, one finds the all compiled binaries in 
~/Desktop/HWSensors/Binaries/. 	  	 		&nbsp; 	  	 		Note that all 
compiled kext binaries are once more attached towards the bottom of this
 originating thread (guide). Just download and 
unzip&nbsp;HW-Sensors-IF.zip&nbsp;and copy all kexts to 
/EFI/Clover/kexts/Other/. Note that this pre-compiled binary package 
already implements a modified GPU Sensor kext of @Kozlek, which should 
also account for Polaris GPUs. 	  	 		&nbsp; 	  	 		Many thanks to both 
@interferenc and @Bjango for their awesome and extensive contributions 
and brilliant work! 	  	 		&nbsp; 	  	 		Skylake-X/X299 iStatMenus 
Hardware Sensor Data: 	    	 		 	   	 		&nbsp; 	   	 		Skylake-X CPU 
Thread Utilisation Graphs: 	   	 		   	 		&nbsp; 	   	 		To change from 
CPU core to thread utilisation monitoring, uncheck "Hide Hyper-Threading
 cores" in Section "CPU &amp; GPU" of iStatMenus Preferences. 	   	 		  
   	&nbsp;    	Temperature unites can be adjusted between Celsius, 
Fahrenheit and Kelvin in Section "Sensors" of iStatMenus Preferences.   
 	&nbsp;    	    	&nbsp;    	&nbsp;    	F.) Benchmarking     	 		 	    	
&nbsp;    	&nbsp;    	F.1) Sylake-X Intel I9-7980XE (4.8GHz) CPU 
Benchmarking    	&nbsp;    	 		 			 		  		 			&nbsp; 		  		 			 		  		 	
		&nbsp; 		  		 			 				Geekbench CPU Benchmark:&nbsp; 			  			  					
Multi-Core Sore:&nbsp;65.348 				  				 					Single-Core 
Sore:&nbsp;5.910 				  			  				&nbsp; 			  			 				Cinebench Cpu 
Benchmark: 			  			  					4.618 CB 				  			  				&nbsp; 			  		  		 			
 				 			  			 				&nbsp; 			  			 				&nbsp; 			  			 				Compare with 
recent&nbsp;Geekbench results for the 18-core iMacPro (W2191B): 			  			
 				&nbsp; 			  			 				 					Geekbench CPU Benchmark:&nbsp; 				  				
  						Multi-Core Sore: 46.406 					  					 						Single-Core 
Sore:&nbsp;5.175 					  				  					 				  			  			 				&nbsp; 			  			 	
			&nbsp; 			  			 				F.2) Gigabyte AORUS GTX 1080 Ti Waterforce EB 
11GB Extreme Edition Benchmarking 			 		 	  	 		 			&nbsp; 		  		 			 		
		 			  			 				&nbsp; 			  			 				Geekbench OpenGl and Metal2 
Benchmarks:&nbsp; 			  			  					OpenGL Sore:&nbsp;229.965 				  				 		
			Metal2 Sore:&nbsp;242.393 				  			  				&nbsp; 			  		  		 			 				 
			  			 				&nbsp; 			 		  		 			G.) Summary and Conclusion: 		   		 		
	&nbsp; 		   		 			 				Already during the first individual macOS High 
Sierra 10.13 beta releases, Syklake-X/X299 systems reached full 
functionality together with flawless stability. Now with final 
release&nbsp;macOS High Sierra 10.13.6 SU (17G3025), it might be the 
right moment to follow my build and Desktop Installation Guide to unfold
 the unbelievable Skylake-X/X299 potential together with macOS High 
Sierra 10.13 (special iMac Pro build)! 			  			 				&nbsp; 			  			 				I
 am quite optimistic that high-end builds based on extremely novel 
Skylake-X/X299 technology will find manifold application, not only in 
science and research at universities or research institutions, 
engineering facilities, or medical labs, etc... Skylake-X processors 
with up to 18 cores (36 threads) and turbo frequencies up to 4.8 GHz 
will make X299 to a "relatively cheap" but really serious alternative to
 the iMac Pro's and Mac Pro's. The principal intention of this desktop 
guide was to demonstrate, that we are able to build and configure fully 
functional and relatively "low-cost" high-end systems nowadays, which go
 far beyond of what Apple is able to offer at present or will be ever 
able to offer for some reasonable pricing. A Skylake-X/X299-System, that
 allows the use of all software-packages developed for MacOS, Unix, 
Linux or even Windows at the same time (e.g. think on Vine, Parallels, 
or a dual boot system configuration). The flexibility between different 
mainboards (Asus, Gigabyte, ASRock, MSI, etc.), different Skylake-X 
processors, and different RAM memory configurations (16-128GB) should 
make such system affordable for anybody (also home office, audio and 
video editing/production, etc.) and allow its perfect adaptation for the
 specific purpose, requirements and available budgets. It might not be 
necessary to outline, that current Skylake-X/X299 Systems perform 
absolutely stable on a 24/7/365 basis. 			  			 				&nbsp; 			  			 				I
 am a scientist, expert in solar physics, space weather forecast and 
related telescope/instrument/space-mission development. In the frame of 
my scientific research, I developed parallelized image reconstruction, 
spectral line inversion and numerical modeling algorithms/applications, 
which require tremendous parallelized calculation power, RAM memory and 
storage capacities to reduce, analyze and interpret extensive and 
pioneering scientific ground-based or space-born observational data 
sets. This basically was also the professional motivation for developing
 my innovative iMacPro macOS High Sierra Hackintosh Build&nbsp;iSPOR-S 
(the&nbsp;imaging&nbsp;Spectropolarimetric&nbsp;Parallel&nbsp;Organized&nbsp;Reconstruction&nbsp;Server
 running iSPOR-DP, 
the&nbsp;Imaging&nbsp;Spectropolarimetric&nbsp;Parallel&nbsp;Organized&nbsp;Reconstruction&nbsp;Data&nbsp;Pipeline
 software package for the GREGOR Fabry-Pérot Interferometer, located at 
the 1.5m GREGOR Solar Telescope (Europe's largest solar telescope) on 
Tenerife, Canary Islands, Spain) and for the entire respective iMac Pro 
Skylake-X/X299 Desktop User Guide Development, which hopefully will be 
also of benefit for others.&nbsp;&nbsp;Anybody interested can find more 
details on my&nbsp;personal webpage. 			 		  		 			&nbsp; 		  		 			 			
	 			 		 	   	</span></div>


<ul class="ipsList_inline ipsType_medium ipsType_light ipsSpacer_top ipsSpacer_half">
	<li class="ipsRichEmbed_commentPhoto">
		


	<a href="https://www.insanelymac.com/forum/profile/1362934-kgp-imacpro/" data-ipshover="" data-ipshover-target="https://www.insanelymac.com/forum/profile/1362934-kgp-imacpro/?do=hovercard" class="ipsUserPhoto ipsUserPhoto_tinier" title="Go to KGP-iMacPro's profile" target="_blank">
		<img src="photo-thumb-1362934.jpg" alt="KGP-iMacPro">
	</a>

	</li>
	<li>
		<a href="https://www.insanelymac.com/forum/topic/331658-how-to-build-your-own-imac-pro-successful-buildextended-guide/?do=getFirstComment" target="_blank">
			By KGP-iMacPro,  <time datetime="2018-01-15T16:55:51Z" title="01/16/2018 01:55  AM" data-short="1 yr">January 16, 2018</time>
		</a>
	</li>
	
		<li>
			<a href="https://www.insanelymac.com/forum/topic/331658-how-to-build-your-own-imac-pro-successful-buildextended-guide/?do=getLastComment" target="_blank">
				
					<i class="fa fa-comment"></i> 658 replies
				
			</a>
		</li>
	
</ul>
			</div>
		</div>

		<div class="ipsType_richText ipsType_medium" data-truncate="3"><span> 			SSDT-9.aml, apparently the one and only key for a complete and </span><span>successful TB Hackintosh implementation...In order to demonstrate that I am not </span><span style="display: block; overflow: hidden; text-indent: 0px; text-overflow: ellipsis; white-space: nowrap;">yet
 totally insane with my guesses and ideas, let's demonstrate below that 
SSDT-9.aml seems to be one of possible cornerstone for reaching full 
Hackintosh functionality on a iMac Pro Hackintosh system.However, due to
 the missing method "_ini" implementation (port and device 
initialisation/configuration) in SSDT-9.aml and likely also due to other
 missing Apple iMac Pro SSDT/DSDT ACPI implementations, my modified 
SSDT-9.aml yet fails in implementing the basic system essentials for a 
complete TB Hackintosh configuration and results in plenty of ACPI 
errors, Name Space Lookup failures and variable or argument errors 
during boot..     	&nbsp;     	    	&nbsp;     	     	&nbsp;     	     	
&nbsp;     	Nevertheless, few essential things are added when inspecting
 IOREG or Apple's system report..While from the TB-kexts used on a real 
iMacPro only com.apple.driver.AppleThunderboltNHI.kext is active on our 
Hackintosh systems, SSDT-9.aml so far also loads at least 
com.apple.iokit.IOThunderboltFamily.kext.     	&nbsp;     	     	&nbsp; 
    	     	&nbsp;     	However, 
com.apple.driver.AppleThunderboltDPAdapterFamily, 
com.apple.driver.AppleThunderboltIP.kext, 
com.apple.driver.AppleThunderboltDPInAdapter, 
com.apple.driver.AppleThunderboltPCIDownAdapter remain without function 
due to frequent ACPI errors (Namespace Lookup errors, argument and 
variable errors, etc.) during boot, which are supposedly due to the yet 
missing Method "_ini" (port/device implementation/configuration) in my 
most actual SSDT-9.aml distribution and lacking related ACPI 
implementations...     	&nbsp;     	     	&nbsp;     	Most essentially, 
with my current SSDT-9.aml, also the "RTPC true" entry adds under 
AppleThuderboltNHIType3.. 	&nbsp;     	     	&nbsp;     	One might also 
find the one or other interesting IOREG add-ons under in all other TB 
PCI device implementations...Please find linked here&nbsp;my current AML
 TB implementations for experts only (!!!), i.e. SSDT9.aml, 
SSDT-DTPG.aml,&nbsp;SSDT-GNVS.aml,&nbsp;SSDT-GG/SG-Methods.aml, 
SSDT-OSDW.aml and&nbsp;SSDT-SBUS.aml,&nbsp;&nbsp;I also link once 
more&nbsp;@TheOffcialGypsy&nbsp;'s most recent iMac Pro dump, where you 
find the original SSDT-9.aml (BTW.. SSDT-10.aml might be noteworthy in 
addition)&nbsp;&nbsp;besides the iMac Pro DSDT and other iMacPro SSDT 
implementations... linked as well the IOREG save of the original iMac 
Pro...@TheOfficialGypsy, any more recent dump under 10.13.6 or 10.14 PB4
 available?     	I guess, it rapidly might become evident that the 
complexity of the problem apparently exceeds the capacities and 
knowledge of one single person... What about active collaborators, here 
online or maybe also within some small local "insitu" and "hands-on" 
workgroup in the Berlin/Germany area?     	&nbsp;     	
@apfelnico,&nbsp;@nmano, or who ever is interested and is able to join 
this endeavour?I really don't know if there is any valid chance for a 
successful SSDT-9.aml Hackintosh TB implementation.. However, we should 
give it a try..&nbsp;Enjoy and have fun,     	&nbsp;     	KGP     	
&nbsp;     	P.S:&nbsp;SSDT-9.aml of the iMac Pro dump is broken and 
impossible to be compiled..One needs to start with the SSDT-9.dsl and 
add "\_SB.PC01.BR1A.UPSB.AMPE ()" under:     	&nbsp;      Scope (\_GPE) 
        {             Method (_L32, 0, NotSerialized)  // _Lxx: 
Level-Triggered GPE             {                 If (LNot (OSDW ()))   
              {                     If (LEqual (\_SB.PC01.BR1A.POC0, 
One))                     {                         Return (Zero)       
              }                      Sleep (0x0190)                     
If (LEqual (\_SB.PC01.BR1A.WTLT (), One))                     {         
                \_SB.PC01.BR1A.ICMS ()                     }            
         Else                     {                     }               
       If (\_SB.PC01.BR1A.UPMB)                     {                   
      Store (Zero, \_SB.PC01.BR1A.UPMB)                         Sleep 
(One)                     }                     Else                    
 {                     }                      \_SB.PC01.BR1A.CMPE ()    
             }                 ElseIf (LEqual (\_SB.GGII (0x01030012), 
One))                 {                     \_SB.SGII (0x01030012, Zero)
                 }                 Else                 {               
      \_SB.SGII (0x01030012, One)                 }                  
\_SB.PC01.BR1A.UPSB.AMPE ()             }         }   	It took me weeks 
and months to discover and fix these stupid errors..     	&nbsp;     	
For the sake of completeness and for simplicity, I also attach a minimal
 SSDT-9 hot plug injector AML, i.e. 
SSDT-9-minimal-hotplug-injector.aml,&nbsp;which pretty does everything 
for achieving a functional TB and TB XHC&nbsp;USB hot plug workaround on
 THB-C removed Hackintosh systems..     	&nbsp;     	&nbsp;    		</span></div>

		
			<ul class="ipsList_inline ipsSpacer_top ipsSpacer_half">
				<li>
					

<div class="ipsReactOverview ipsReactOverview_small">
	
		
			<ul>
				
					
					<li>
						
							<a href="https://www.insanelymac.com/forum/topic/331658-how-to-build-your-own-imac-pro-successful-buildextended-guide/?do=showReactionsComment&amp;comment=2629173&amp;reaction=2" data-ipsdialog="" data-ipsdialog-title="See who reacted to this" data-ipstooltip="" title="See who reacted &quot;Thanks&quot;" target="_blank">
						
								<img src="react_thanks.png" alt="Thanks">
						
							</a>
						
					</li>
				
					
					<li>
						
							<a href="https://www.insanelymac.com/forum/topic/331658-how-to-build-your-own-imac-pro-successful-buildextended-guide/?do=showReactionsComment&amp;comment=2629173&amp;reaction=1" data-ipsdialog="" data-ipsdialog-title="See who reacted to this" data-ipstooltip="" title="See who reacted &quot;Like&quot;" target="_blank">
						
								<img src="react_like.png" alt="Like">
						
							</a>
						
					</li>
				
			</ul>
		
		
			<span class="ipsType_medium">4</span>
		
	
</div>
				</li>
			</ul>
				
	</div>
</div>
		</div>
		<div id="ipsEmbedLoading">
			<span></span>
		</div>
		
	

</body></html>